<?php  //[STAMP] b4348ea221d78ef06120f7dfe482342c
namespace _generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

use Codeception\Module\Asserts;
use Codeception\Scenario;
use Codeception\Step\Action;

trait MathTesterActions
{
    /**
     * @return Scenario
     */
    abstract protected function getScenario();


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are equal.
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     *
     * @return mixed
     * @see Asserts::assertEquals
     */
    public function assertEquals($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new Action('assertEquals', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are not equal
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see Asserts::assertNotEquals
     */
    public function assertNotEquals($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new Action('assertNotEquals', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are same
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     *
     * @return mixed
     * @see Asserts::assertSame
     */
    public function assertSame($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new Action('assertSame', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are not same
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see Asserts::assertNotSame
     */
    public function assertNotSame($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new Action('assertNotSame', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is greater than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see Asserts::assertGreaterThan
     */
    public function assertGreaterThan($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new Action('assertGreaterThan', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @deprecated
     * @see Asserts::assertGreaterThen
     */
    public function assertGreaterThen($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new Action('assertGreaterThen', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is greater or equal than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see Asserts::assertGreaterThanOrEqual
     */
    public function assertGreaterThanOrEqual($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new Action('assertGreaterThanOrEqual', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @deprecated
     * @see Asserts::assertGreaterThenOrEqual
     */
    public function assertGreaterThenOrEqual($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new Action('assertGreaterThenOrEqual', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is less than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see Asserts::assertLessThan
     */
    public function assertLessThan($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new Action('assertLessThan', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is less or equal than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see Asserts::assertLessThanOrEqual
     */
    public function assertLessThanOrEqual($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new Action('assertLessThanOrEqual', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that haystack contains needle
     *
     * @param        $needle
     * @param        $haystack
     * @param string $message
     * @see Asserts::assertContains
     */
    public function assertContains($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new Action('assertContains', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that haystack doesn't contain needle.
     *
     * @param        $needle
     * @param        $haystack
     * @param string $message
     * @see Asserts::assertNotContains
     */
    public function assertNotContains($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new Action('assertNotContains', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that string match with pattern
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see Asserts::assertRegExp
     */
    public function assertRegExp($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new Action('assertRegExp', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that string not match with pattern
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see Asserts::assertNotRegExp
     */
    public function assertNotRegExp($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new Action('assertNotRegExp', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is empty.
     *
     * @param        $actual
     * @param string $message
     * @see Asserts::assertEmpty
     */
    public function assertEmpty($actual, $message = null) {
        return $this->getScenario()->runStep(new Action('assertEmpty', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is not empty.
     *
     * @param        $actual
     * @param string $message
     * @see Asserts::assertNotEmpty
     */
    public function assertNotEmpty($actual, $message = null) {
        return $this->getScenario()->runStep(new Action('assertNotEmpty', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is NULL
     *
     * @param        $actual
     * @param string $message
     * @see Asserts::assertNull
     */
    public function assertNull($actual, $message = null) {
        return $this->getScenario()->runStep(new Action('assertNull', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is not NULL
     *
     * @param        $actual
     * @param string $message
     * @see Asserts::assertNotNull
     */
    public function assertNotNull($actual, $message = null) {
        return $this->getScenario()->runStep(new Action('assertNotNull', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that condition is positive.
     *
     * @param        $condition
     * @param string $message
     * @see Asserts::assertTrue
     */
    public function assertTrue($condition, $message = null) {
        return $this->getScenario()->runStep(new Action('assertTrue', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that condition is negative.
     *
     * @param        $condition
     * @param string $message
     * @see Asserts::assertFalse
     */
    public function assertFalse($condition, $message = null) {
        return $this->getScenario()->runStep(new Action('assertFalse', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if file exists
     *
     * @param string $filename
     * @param string $message
     * @see Asserts::assertFileExists
     */
    public function assertFileExists($filename, $message = null) {
        return $this->getScenario()->runStep(new Action('assertFileExists', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if file doesn't exist
     *
     * @param string $filename
     * @param string $message
     * @see Asserts::assertFileNotExists
     */
    public function assertFileNotExists($filename, $message = null) {
        return $this->getScenario()->runStep(new Action('assertFileNotExists', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fails the test with message.
     *
     * @param $message
     * @see Asserts::fail
     */
    public function fail($message) {
        return $this->getScenario()->runStep(new Action('fail', func_get_args()));
    }
}
