// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
// EDIT THE CORRESPONDENT .ts FILE INSTEAD

// ----------------------------------------------------------------------------
import log from 'ololog';
import assert from 'assert';
import testTrade from '../../../test/Exchange/test.trade.js';
import errors from '../../../base/errors.js';
/*  ------------------------------------------------------------------------ */
export default async (exchange, symbol) => {
    // log (symbol.green, 'watching my trades...')
    const method = 'watchMyTrades';
    if (!exchange.has[method]) {
        log(exchange.id, 'does not support', method + '() method');
        return;
    }
    let response = undefined;
    let now = Date.now();
    const ends = now + 10000;
    while (now < ends) {
        try {
            response = await exchange[method](symbol);
            now = Date.now();
            assert(response instanceof Array);
            log(exchange.iso8601(now), exchange.id, symbol.green, method, Object.values(response).length.toString().green, 'trades');
            // log.noLocate (asTable (response))
            for (let i = 0; i < response.length; i++) {
                const trade = response[i];
                testTrade(exchange, trade, symbol, now);
                if (i > 0) {
                    const previousTrade = response[i - 1];
                    if (trade.timestamp && previousTrade.timestamp) {
                        assert(trade.timestamp >= previousTrade.timestamp);
                    }
                }
            }
        }
        catch (e) {
            if (!(e instanceof errors.NetworkError)) {
                throw e;
            }
            now = Date.now();
        }
    }
    return response;
};
