import coinbaseproRest from '../coinbasepro.js';
import { Int } from '../base/types.js';
import Client from '../base/ws/Client.js';
export default class coinbasepro extends coinbaseproRest {
    describe(): any;
    authenticate(): {
        timestamp: number;
        key: string;
        signature: any;
        passphrase: string;
    };
    subscribe(name: any, symbol: any, messageHashStart: any, params?: {}): Promise<any>;
    watchTicker(symbol: string, params?: {}): Promise<any>;
    watchTrades(symbol: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    watchMyTrades(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    watchOrders(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    watchOrderBook(symbol: string, limit?: Int, params?: {}): Promise<any>;
    handleTrade(client: Client, message: any): any;
    handleMyTrade(client: Client, message: any): any;
    parseWsTrade(trade: any): import("../base/types.js").Trade;
    parseWsOrderStatus(status: any): string;
    handleOrder(client: Client, message: any): void;
    parseWsOrder(order: any): {
        info: any;
        symbol: any;
        id: string;
        clientOrderId: string;
        timestamp: number;
        datetime: string;
        lastTradeTimestamp: any;
        type: string;
        timeInForce: any;
        postOnly: any;
        side: string;
        price: number;
        stopPrice: any;
        triggerPrice: any;
        amount: number;
        cost: any;
        average: any;
        filled: any;
        remaining: number;
        status: string;
        fee: any;
        trades: any;
    };
    handleTicker(client: Client, message: any): any;
    parseTicker(ticker: any, market?: any): import("../base/types.js").Ticker | {
        symbol: any;
        timestamp: number;
        datetime: string;
        high: number;
        low: number;
        bid: number;
        bidVolume: number;
        ask: number;
        askVolume: number;
        vwap: any;
        open: number;
        close: number;
        last: number;
        previousClose: any;
        change: any;
        percentage: any;
        average: any;
        baseVolume: number;
        quoteVolume: any;
        info: any;
    };
    handleDelta(bookside: any, delta: any): void;
    handleDeltas(bookside: any, deltas: any): void;
    handleOrderBook(client: Client, message: any): void;
    handleSubscriptionStatus(client: Client, message: any): any;
    handleMessage(client: Client, message: any): any;
}
