<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\btcex as Exchange;
use ccxt\ExchangeError;
use ccxt\ArgumentsRequired;
use ccxt\BadRequest;
use ccxt\InvalidOrder;
use ccxt\AuthenticationError;
use ccxt\Precise;
use React\Async;

class btcex extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'btcex',
            'name' => 'BTCEX',
            'countries' => array( 'CA' ), // Canada
            'version' => 'v1',
            'certified' => false,
            'pro' => true,
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/173489620-d49807a4-55cd-4f4e-aca9-534921298bbf.jpg',
                'www' => 'https://www.btcex.com/',
                'api' => array(
                    'rest' => 'https://api.btcex.com',
                ),
                'doc' => 'https://docs.btcex.com/',
                'fees' => 'https://support.btcex.com/hc/en-us/articles/4415995130647',
                'referral' => array(
                    'url' => 'https://www.btcex.com/en-us/register?i=48biatg1',
                    'discount' => 0.1,
                ),
            ),
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => true,
                'swap' => true,
                'future' => true,
                'option' => true,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'createLimitBuyOrder' => true,
                'createLimitSellOrder' => true,
                'createMarketBuyOrder' => true,
                'createMarketSellOrder' => true,
                'createOrder' => true,
                'createPostOnlyOrder' => true,
                'createReduceOnlyOrder' => true,
                'createStopLimitOrder' => true,
                'createStopMarketOrder' => true,
                'createStopOrder' => true,
                'editOrder' => false,
                'fetchBalance' => true,
                'fetchBorrowRate' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchBorrowRates' => false,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => true,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => true,
                'fetchIndexOHLCV' => false,
                'fetchLeverage' => true,
                'fetchLeverageTiers' => true,
                'fetchMarginMode' => false,
                'fetchMarketLeverageTiers' => true,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterest' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchOrderTrades' => true,
                'fetchPosition' => true,
                'fetchPositionMode' => false,
                'fetchPositions' => true,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => false,
                'fetchTime' => false,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTransactionFees' => null,
                'fetchWithdrawal' => true,
                'fetchWithdrawals' => true,
                'setLeverage' => true,
                'setMarginMode' => true,
                'signIn' => true,
                'transfer' => true,
                'withdraw' => false,
            ),
            'timeframes' => array(
                '1m' => '1',
                '3m' => '3',
                '5m' => '5',
                '15m' => '15',
                '30m' => '30',
                '1h' => '60',
                '2h' => '120',
                '3h' => '180',
                '4h' => '240',
                '6h' => '360',
                '12h' => '720',
                '1d' => '1D',
                '3d' => '3D',
                '1M' => '30D',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        // Market data
                        'get_last_trades_by_currency',
                        'get_last_trades_by_instrument',
                        'get_order_book',
                        'tickers',
                        'get_instruments',
                        'get_tradingview_chart_data',
                        // CMC
                        'cmc_spot_summary',
                        'cmc_spot_ticker',
                        'cmc_spot_orderbook',
                        'cmc_market_trades',
                        'cmc_contracts',
                        'cmc_contract_orderbook',
                        // CoinGecko
                        'coin_gecko_spot_pairs',
                        'coin_gecko_spot_ticker',
                        'coin_gecko_spot_orderbook',
                        'coin_gecko_market_trades',
                        'coin_gecko_contracts',
                        'coin_gecko_contract_orderbook',
                        'get_perpetual_leverage_bracket',
                        'get_perpetual_leverage_bracket_all',
                    ),
                    'post' => array(
                        'auth',
                    ),
                ),
                'private' => array(
                    'get' => array(
                        // wallet
                        'get_deposit_record',
                        'get_withdraw_record',
                        // trade
                        'get_position',
                        'get_positions',
                        'get_open_orders_by_currency',
                        'get_open_orders_by_instrument',
                        'get_order_history_by_currency',
                        'get_order_history_by_instrument',
                        'get_order_state',
                        'get_user_trades_by_currency',
                        'get_user_trades_by_instrument',
                        'get_user_trades_by_order',
                        'get_perpetual_user_config',
                    ),
                    'post' => array(
                        // auth
                        'logout',
                        // wallet
                        'get_assets_info',
                        'add_withdraw_address',
                        // trade
                        'buy',
                        'sell',
                        'cancel',
                        'cancel_all_by_currency',
                        'cancel_all_by_instrument',
                        'close_position',
                        'adjust_perpetual_leverage',
                        'adjust_perpetual_margin_type',
                        'submit_transfer',
                    ),
                    'delete' => array(),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
                'margin' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
                'perpetual' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.002'),
                    'taker' => $this->parse_number('0.002'),
                ),
            ),
            'exceptions' => array(
                'exact' => array(
                    '9999' => '\\ccxt\\ExchangeError', // SYSTEM_INNER_ERROR System error, please try again later
                    '9900' => '\\ccxt\\ExchangeNotAvailable', // SERVICE_BUSY Service is busyï¼Œplease try again later
                    '401' => '\\ccxt\\AuthenticationError', // UNAUTHENTICATION_ERROR UnAuthentication
                    '403' => '\\ccxt\\AuthenticationError', // ACCESS_DENIED_ERROR Access denied
                    '1000' => '\\ccxt\\ExchangeNotAvailable', // NO_SERVICE No service found
                    '1001' => '\\ccxt\\BadRequest', // BAD_REQUEST Bad requested
                    '1005' => '\\ccxt\\DDoSProtection', // array("code":1005,"message":"Operate too frequently")
                    '2000' => '\\ccxt\\AuthenticationError', // NEED_LOGIN Login is required
                    '2001' => '\\ccxt\\AuthenticationError', // ACCOUNT_NOT_MATCH Account information does not match
                    '2002' => '\\ccxt\\AuthenticationError', // ACCOUNT_NEED_ENABLE Account needs to be activated
                    '2003' => '\\ccxt\\AuthenticationError', // ACCOUNT_NOT_AVAILABLE Account not available
                    '2010' => '\\ccxt\\PermissionDenied', // array("code":2010,"message":"Access denied","data":array())
                    '3000' => '\\ccxt\\AuthenticationError', // TEST user
                    '3002' => '\\ccxt\\AuthenticationError', // NICKNAME_EXIST Nicknames exist
                    '3003' => '\\ccxt\\AuthenticationError', // ACCOUNT_NOT_EXIST No account
                    '3004' => '\\ccxt\\BadRequest', // PARAM_ERROR Parameter exception
                    '3005' => '\\ccxt\\NotSupported', // LANGUAGE_NONSUPPORT Unsupported languages
                    '3007' => '\\ccxt\\AuthenticationError', // ONLY_SUBACCOUNT_OPE Sub-account operations only
                    '3008' => '\\ccxt\\AuthenticationError', // LOGIN_ENABLE Account not logged
                    '3009' => '\\ccxt\\AuthenticationError', // TFA_EXPIRE_ERROR Google key failed
                    '3011' => '\\ccxt\\AuthenticationError', // PASSWORD_ERROR Password error
                    '3012' => '\\ccxt\\AuthenticationError', // TFA_UUID_ERROR One-time unlock code error
                    '3013' => '\\ccxt\\RequestTimeout', // TIME_OUT time out
                    '3015' => '\\ccxt\\AuthenticationError', // ID_IS_ERROR id_is_error
                    '3016' => '\\ccxt\\AuthenticationError', // WRONG_SUBACCOUNT_NAME already taken
                    '3018' => '\\ccxt\\BadRequest', // USER_NAME_AT_LEAST_5_BYTE The user name must have at least 5 digits
                    '3019' => '\\ccxt\\BadRequest', // PASSWORD_AT_LEAST_8_BYTE 8-32 bits contain at least three of the numbers, capital, lowercase letters and special symbols!
                    '3020' => '\\ccxt\\BadRequest', // TFA_ALREADY_SET GoogleCode Already Set
                    '3021' => '\\ccxt\\BadRequest', // PWD_MATCH_ERROR pwd_match_error
                    '3022' => '\\ccxt\\BadRequest', // ILLEGAL_OPERATION illegal operation
                    '3023' => '\\ccxt\\BadRequest', // REMOVE_SUBACCOUNT_OVER_LIMIT remove subaccount over limit
                    '3024' => '\\ccxt\\BadRequest', // GOOGLE_VERIFICATION_CODE_TURNED_ON Google verification code turned on
                    '3025' => '\\ccxt\\BadRequest', // OPERATION_FAILURE The operation failure
                    '3026' => '\\ccxt\\BadRequest', // ACCOUNT_ACTIVED Account has Actived
                    '3027' => '\\ccxt\\BadRequest', // INVALID_EMAIL_ADDRESS Invalid email address!
                    '3028' => '\\ccxt\\BadRequest', // PASSWORD_FORMAT_ERROR Password format err
                    '3029' => '\\ccxt\\DDoSProtection', // ONE_MINUTE_LIMIT Only one operation per minute and the remaining ${times}s
                    '3030' => '\\ccxt\\DDoSProtection', // ONE_HOUR_LIMIT Do this up to 5 times per hour
                    '3031' => '\\ccxt\\BadRequest', // USER_NAME_UP_12_BYTE Up to 12 characters, only letters and numbers are supported
                    '3032' => '\\ccxt\\BadRequest', // EMAIL_SETTED You need to set email address and password first
                    '3033' => '\\ccxt\\BadRequest', // PASSWORD_SETTED You need to set password first
                    '3034' => '\\ccxt\\AuthenticationError', // SUBACCOUNT_EMAIL_ACTIVATE You need to wait for email confirmation
                    '3035' => '\\ccxt\\BadRequest', // API_NOT_EXIST No api message
                    '3036' => '\\ccxt\\BadRequest', // UNAVAILABLE_IN_SUBACCOUNT Unavailable in subaccount
                    '3037' => '\\ccxt\\BadRequest', // MAX_SUBACCOUNT_NUMBER Limit of subaccounts is reached
                    '3038' => '\\ccxt\\BadRequest', // MAIN_SUBACCOUNT_EMAIL_SAME Provided email address is already used for your other subaccount
                    '3039' => '\\ccxt\\BadRequest', // MAX_API_KEY_NUMBER You cannot have more than 8 API keys
                    '3040' => '\\ccxt\\AuthenticationError', // ALPHA_TEST Non-invited users shall contact BTCEX Team to obtain the internal tests qualification
                    '3041' => '\\ccxt\\BadRequest', // API_NAME_MAX_LENGTH Name of key maximum length - 16 characters
                    '4000' => '\\ccxt\\BadRequest', // WALLET_ERROR Wallet error || RECHARGE_CLOSED Recharge closed
                    '4001' => '\\ccxt\\InvalidAddress', // WRONG_WITHDRAWAL_ADDRESS Wrong withdrawal address
                    '4002' => '\\ccxt\\InvalidAddress', // ADDRESS_DOES_NOT_EXIST Address does not exist
                    '4003' => '\\ccxt\\BadRequest', // WITHDRAWAL_CLOSED Withdrawal closed || TOO_SMALL_WITHDRAWAL_AMOUNT Too small withdrawal amount
                    '4004' => '\\ccxt\\NotSupported', // INTERNAL_TRANSFER_IS_NOT_SUPPORTED_TEMPORARILY Internal transfer is not supported temporarily
                    '4005' => '\\ccxt\\ExchangeError', // WITHDRAW_FAIL Withdrawal failed
                    '4006' => '\\ccxt\\InsufficientFunds', // INSUFFICIENT_ASSET ser asset not enough
                    '4007' => '\\ccxt\\BadRequest', // TRANSFER_ACCOUNT_ERROR Transfer account error
                    '4008' => '\\ccxt\\NotSupported', // AMOUNT_ERROR Amount error
                    '4009' => '\\ccxt\\InvalidAddress', // NO_RECHARGE_ADDRESS No recharge address
                    '4010' => '\\ccxt\\BadRequest', // GET_TRANSFER_SUBACCOUNT_ERROR Get transfer subaccount error
                    '4011' => '\\ccxt\\BadRequest', // TRANSFER_SUBMIT_URL_ERROR Transfer submit url error
                    '5001' => '\\ccxt\\InvalidOrder', // ORDER_PARAM_WRONG Order's param wrong.
                    '5002' => '\\ccxt\\OrderNotFound', // ORDER_DOSE_NOT_EXIST Order does not exist.
                    '5003' => '\\ccxt\\InvalidOrder', // CONTRACT_DOSE_NOT_EXIST Contract does not exist.
                    '5004' => '\\ccxt\\InvalidOrder', // ORDER_STATUS_ERR Order status error.
                    '5005' => '\\ccxt\\InvalidOrder', // ORDER_AMOUNT_MIN_TRANCSACTION_ERR Order amount min transaction error.
                    '5006' => '\\ccxt\\InvalidOrder', // ORDER_PRICE_MIN_TRANCSACTION_ERR Order price min price error.
                    '5007' => '\\ccxt\\InvalidOrder', // ORDER_PRICE_TICK_SIZE_ERR Order price tick size error.
                    '5008' => '\\ccxt\\InvalidOrder', // ORDER_TYPE_ERR Order type error.
                    '5009' => '\\ccxt\\InvalidOrder', // ORDER_OPTION_IS_EXPIRED Order option is expired.
                    '5010' => '\\ccxt\\InvalidOrder', // ORDER_IS_NOT_ACTIVE Order is not active.
                    '5011' => '\\ccxt\\InvalidOrder', // IV_ORDER_ARE_NOT_SUPPORTED Iv orders are not supported.
                    '5012' => '\\ccxt\\InvalidOrder', // ORDER_NO_MARK_PRICE_ERROR No mark price error.
                    '5013' => '\\ccxt\\InvalidOrder', // ORDER_PRICE_RANGE_IS_TOO_HIGH order price range is too high.
                    '5014' => '\\ccxt\\InvalidOrder', // ORDER_PRICE_RANGE_IS_TOO_LOW Order price range is too low.
                    '5109' => '\\ccxt\\InvalidOrder', // ORDER_PRICE_RANGE_IS_TOO_LOW Order price range is too low.
                    '5119' => '\\ccxt\\InvalidOrder', // array("code":5119,"message":"Cannot be less than the minimum order valueï¼š10USDT, instrument => GXE/USDT","data":array("coinType":"USDT","amount":"10","instrumentName":"GXE/USDT"))
                    '5135' => '\\ccxt\\InvalidOrder', // The quantity should be larger than => 0.01
                    '5901' => '\\ccxt\\InvalidOrder', // TRANSFER_RESULT transfer out success.
                    '5902' => '\\ccxt\\InvalidOrder', // ORDER_SUCCESS place order success.
                    '5903' => '\\ccxt\\InvalidOrder', // ORDER_FAIL place order fail.
                    '5904' => '\\ccxt\\InvalidOrder', // PRICE_TRIGGER_LIQ price trigger liquidation
                    '5905' => '\\ccxt\\InvalidOrder', // LIQ_CANCEL liquidation make order cancel.
                    '5906' => '\\ccxt\\InvalidOrder', // LIQ_ORDER liquidation place a new order
                    '5907' => '\\ccxt\\InsufficientFunds', // ASSET_NOT_ENOUTH asset not enough
                    '8000' => '\\ccxt\\BadRequest', // PARAM_ERROR Request params not valid!
                    '8001' => '\\ccxt\\BadRequest', // DATA_NOT_EXIST The data doesn't exist!
                    '8100' => '\\ccxt\\BadRequest', // CODE_CHECK_FAIL Incorrect verification code
                    '8101' => '\\ccxt\\RequestTimeout', // CODE_NOT_EXIST Verification code time out, please retry later
                    '8102' => '\\ccxt\\DDoSProtection', // CODE_CHECK_FAIL_LIMIT Errors exceed the limit. Please try again after 24H.
                    '8103' => '\\ccxt\\BadRequest', // SMS_CODE_CHECK_FAIL Incorrect SMS verification code
                    '8104' => '\\ccxt\\BadRequest', // MAIL_CODE_CHECK_FAIL Incorrect mail verification code
                    '8105' => '\\ccxt\\BadRequest', // GOOGLE_CODE_CHECK_FAIL 2FA Code error!
                    '8106' => '\\ccxt\\DDoSProtection', // SMS_CODE_LIMIT Your message service is over limit today, please try tomorrow
                    '8107' => '\\ccxt\\ExchangeError', // REQUEST_FAILED Request failed
                    '10000' => '\\ccxt\\AuthenticationError', // Authentication Failure
                    '11000' => '\\ccxt\\BadRequest', // CHANNEL_REGEX_ERROR channel regex not match
                ),
                'broad' => array(
                ),
            ),
            'precisionMode' => TICK_SIZE,
            'options' => array(
                'accountsByType' => array(
                    'wallet' => 'WALLET',
                    'spot' => 'SPOT',
                    'perpetual' => 'PERPETUAL',
                    'margin' => 'MARGIN',
                    'swap' => 'PERPETUAL',
                    'BTC' => 'BTC',
                    'ETH' => 'ETH',
                ),
                'createMarketBuyOrderRequiresPrice' => true,
            ),
            'commonCurrencies' => array(
                'ALT' => 'ArchLoot',
            ),
        ));
    }

    public function fetch_markets($params = array ()) {
        return Async\async(function () use ($params) {
            $response = Async\await($this->publicGetGetInstruments ($params));
            $markets = $this->safe_value($response, 'result', array());
            //
            //     {
            //         "jsonrpc":"2.0",
            //         "usIn":1647533492507,
            //         "usOut":1647533492511,
            //         "usDiff":4,
            //         "result":[array(
            //             "currency":"BTC",
            //             "base_currency":"USDT",
            //             "contract_size":"0.01",
            //             "creation_timestamp":"1632384961348",
            //             "expiration_timestamp":"1648195200000",
            //             "instrument_name":"BTC-25MAR22",
            //             "show_name":"BTC-25MAR22",
            //             "is_active":true,
            //             "kind":"future",
            //             "leverage":0,
            //             "maker_commission":"10",
            //             "taker_commission":"17",
            //             "min_trade_amount":"0.01",
            //             "option_type":"init",
            //             "quote_currency":"USDT",
            //             "settlement_period":"week",
            //             "strike":"0",
            //             "tick_size":"0.1",
            //             "instr_multiple":"0.01",
            //             "order_price_low_rate":"0.8",
            //             "order_price_high_rate":"1.2",
            //             "order_price_limit_type":0,
            //             "min_qty":"0.01",
            //             "min_notional":"0",
            //             "support_trace_trade":false
            //         )]
            //     }
            //
            $result = array();
            for ($i = 0; $i < count($markets); $i++) {
                $market = $markets[$i];
                $id = $this->safe_string($market, 'instrument_name');
                $type = $this->safe_string($market, 'kind');
                $unifiedType = $type;
                if ($type === 'perpetual') {
                    $unifiedType = 'swap';
                }
                $baseId = $this->safe_string($market, 'quote_currency');
                $quoteId = $this->safe_string($market, 'base_currency');
                $swap = ($type === 'perpetual');
                $spot = ($type === 'spot');
                $margin = ($type === 'margin');
                $option = ($type === 'option');
                $future = ($type === 'future');
                $contract = $swap || $future || $option;
                $expiry = null;
                if ($option || $future) {
                    $baseId = $this->safe_string($market, 'currency');
                    $expiry = $this->safe_integer($market, 'expiration_timestamp');
                }
                $contractSize = null;
                $settleId = null;
                $settle = null;
                if ($contract) {
                    $settleId = $quoteId;
                    $settle = $this->safe_currency_code($settleId);
                }
                $optionType = null;
                $strike = null;
                if ($option) {
                    $optionType = $this->safe_string($market, 'option_type');
                    $strike = $this->safe_number($market, 'strike');
                }
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $symbol = null;
                if ($margin) {
                    $symbol = $id;
                } else {
                    $symbol = $base . '/' . $quote;
                }
                if ($contract) {
                    $contractSize = $this->safe_number($market, 'contract_size');
                    $symbol = $symbol . ':' . $settle;
                    if ($future || $option) {
                        $symbol = $symbol . '-' . $this->yymmdd($expiry);
                        if ($option) {
                            $letter = ($optionType === 'call') ? 'C' : 'P';
                            $symbol = $symbol . ':' . $this->number_to_string($strike) . ':' . $letter;
                        }
                    }
                }
                $minTradeAmount = $this->safe_number($market, 'min_trade_amount');
                $tickSize = $this->safe_number($market, 'tick_size');
                $maker = $this->safe_number($market, 'maker_commission');
                $taker = $this->safe_number($market, 'taker_commission');
                $percentage = !($option || $future);
                $result[] = array(
                    'id' => $id,
                    'symbol' => $symbol,
                    'base' => $base,
                    'quote' => $quote,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'settleId' => $settleId,
                    'settle' => $settle,
                    'type' => $unifiedType,
                    'maker' => $maker,
                    'taker' => $taker,
                    'percentage' => $percentage,
                    'spot' => $spot,
                    'margin' => $margin,
                    'swap' => $swap,
                    'future' => $future,
                    'option' => $option,
                    'active' => $this->safe_value($market, 'is_active'),
                    'contract' => $contract,
                    'linear' => $contract ? true : null,
                    'inverse' => $contract ? false : null,
                    'contractSize' => $contractSize,
                    'expiry' => $expiry,
                    'expiryDatetime' => $this->iso8601($expiry),
                    'strike' => $strike,
                    'optionType' => $optionType,
                    'precision' => array(
                        'amount' => $minTradeAmount,
                        'price' => $tickSize,
                    ),
                    'limits' => array(
                        'leverage' => array(
                            'min' => null,
                            'max' => $this->safe_string($market, 'leverage'),
                        ),
                        'amount' => array(
                            'min' => $minTradeAmount,
                            'max' => null,
                        ),
                        'price' => array(
                            'min' => $tickSize,
                            'max' => null,
                        ),
                        'cost' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                    'info' => $market,
                );
            }
            return $result;
        }) ();
    }

    public function parse_ticker($ticker, $market = null) {
        //
        //     {
        //         "best_ask_amount":"0.20962",
        //         "best_ask_price":"40491.7",
        //         "best_bid_amount":"0.08855",
        //         "best_bid_price":"40491.6",
        //         "instrument_name":"BTC-USDT",
        //         "last_price":"40493",
        //         "mark_price":"40493.10644717",
        //         "state":"open",
        //         "stats":array(
        //             "high":"41468.8",
        //             "low":"40254.9",
        //             "price_change":"-0.0159",
        //             "volume":"3847.35240000000000005"
        //             "turnover":"1109811189.67100102035328746"
        //         ),
        //         "timestamp":"1647569486224"
        //     }
        //
        $marketId = $this->safe_string($ticker, 'instrument_name');
        if (mb_strpos($marketId, 'PERPETUAL') === false) {
            $marketId = $marketId . '-SPOT';
        }
        $market = $this->safe_market($marketId, $market);
        $symbol = $this->safe_symbol($marketId, $market, '-');
        $timestamp = $this->safe_integer($ticker, 'timestamp');
        $stats = $this->safe_value($ticker, 'stats');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($stats, 'high'),
            'low' => $this->safe_string($stats, 'low'),
            'bid' => $this->safe_string($ticker, 'best_bid_price'),
            'bidVolume' => $this->safe_string($ticker, 'best_bid_amount'),
            'ask' => $this->safe_string($ticker, 'best_ask_price'),
            'askVolume' => $this->safe_string($ticker, 'best_ask_amount'),
            'vwap' => null,
            'open' => null,
            'close' => $this->safe_string($ticker, 'last_price'),
            'last' => $this->safe_string($ticker, 'last_price'),
            'previousClose' => null,
            'change' => null,
            'percentage' => $this->safe_string($stats, 'price_change'),
            'average' => null,
            'baseVolume' => $this->safe_string($stats, 'volume'),
            'quoteVolume' => $this->safe_string($stats, 'turnover'),
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ticker(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'instrument_name' => $market['id'],
            );
            $response = Async\await($this->publicGetTickers (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result', array());
            //
            //     {
            //         "jsonrpc":"2.0",
            //         "usIn":1647569487238,
            //         "usOut":1647569487240,
            //         "usDiff":2,
            //         "result":[array(
            //             "best_ask_amount":"0.20962",
            //             "best_ask_price":"40491.7",
            //             "best_bid_amount":"0.08855",
            //             "best_bid_price":"40491.6",
            //             "instrument_name":"BTC-USDT",
            //             "last_price":"40493",
            //             "mark_price":"40493.10644717",
            //             "state":"open",
            //             "stats":array(
            //                 "high":"41468.8",
            //                 "low":"40254.9",
            //                 "price_change":"-0.0159",
            //                 "volume":"3847.35240000000000005"
            //             ),
            //             "timestamp":"1647569486224"
            //         )]
            //     }
            //
            $ticker = $this->safe_value($result, 0);
            return $this->parse_ticker($ticker, $market);
        }) ();
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $limit, $params) {
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'instrument_name' => $market['id'],
            );
            if ($limit !== null) {
                $request['depth'] = $limit;
            }
            $response = Async\await($this->publicGetGetOrderBook (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result', array());
            //
            //     {
            //         "jsonrpc":"2.0",
            //         "usIn":1647573916524,
            //         "usOut":1647573916526,
            //         "usDiff":2,
            //         "result":{
            //             "asks":[["10155.00000","0.200","186.980","0.000"],["10663.00000","0.200","217.480","0.000"]],
            //             "bids":[["7896.00000","0.200","1.000","0.000"],["7481.00000","0.200","1.000","0.000"]],
            //             "timestamp":"1647573916525",
            //             "instrument_name":"BTC-25MAR22-32000-C",
            //             "version":1002541
            //         }
            //     }
            //
            $timestamp = $this->safe_integer($result, 'timestamp');
            $orderBook = $this->parse_order_book($result, $market['symbol'], $timestamp);
            $orderBook['nonce'] = $this->safe_integer($result, 'version');
            return $orderBook;
        }) ();
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        //
        //     {
        //         "tick":1647547200,
        //         "open":"40868.16800000",
        //         "high":"40877.65600000",
        //         "low":"40647.00000000",
        //         "close":"40699.10000000",
        //         "volume":"100.27789000",
        //         "cost":"4083185.78337596"
        //     }
        //
        return array(
            $this->safe_timestamp($ohlcv, 'tick'),
            $this->safe_number($ohlcv, 'open'),
            $this->safe_number($ohlcv, 'high'),
            $this->safe_number($ohlcv, 'low'),
            $this->safe_number($ohlcv, 'close'),
            $this->safe_number($ohlcv, 'volume'),
        );
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($limit === null) {
                $limit = 10;
            }
            $request = array(
                'resolution' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
                // 'start_timestamp' => 0,
                // 'end_timestamp' => 0,
            );
            $marketId = $market['id'];
            if ($market['spot'] || $market['margin']) {
                $marketId = $market['baseId'] . '-' . $market['quoteId'];
            }
            $request['instrument_name'] = $marketId;
            if ($since === null) {
                $request['end_timestamp'] = $this->milliseconds();
                $request['start_timestamp'] = 0;
            } else {
                $timeframeInSeconds = $this->parse_timeframe($timeframe);
                $timeframeInMilliseconds = $timeframeInSeconds * 1000;
                $request['start_timestamp'] = $since;
                $request['end_timestamp'] = $this->sum($request['start_timestamp'], $limit * $timeframeInMilliseconds);
            }
            $response = Async\await($this->publicGetGetTradingviewChartData (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result', array());
            //
            //     {
            //         "jsonrpc":"2.0",
            //         "usIn":1647578562427,
            //         "usOut":1647578562428,
            //         "usDiff":1,
            //         "result":[array(
            //             "tick":1647547200,
            //             "open":"40868.16800000",
            //             "high":"40877.65600000",
            //             "low":"40647.00000000",
            //             "close":"40699.10000000",
            //             "volume":"100.27789000",
            //             "cost":"4083185.78337596"
            //         )]
            //     }
            //
            return $this->parse_ohlcvs($result, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function parse_trade($trade, $market = null) {
        //
        // fetchTrades (public)
        //
        //     {
        //         "amount":"0.0003",
        //         "direction":"sell",
        //         "iv":"0",
        //         "price":"40767.18",
        //         "timestamp":"1647582687050",
        //         "instrument_name":"BTC-USDT-SPOT",
        //         "trade_id":57499240
        //     }
        //
        // fetchOrderTrades || fetchMyTrades
        //
        //     {
        //         "direction":"sell",
        //         "amount":"0.03",
        //         "price":"397.8",
        //         "fee":"0.011934",
        //         "timestamp":1647668570759,
        //         "role":"taker",
        //         "trade_id":"58319385",
        //         "order_id":"250979478947823616",
        //         "instrument_name":"BNB-USDT-SPOT",
        //         "order_type":"market",
        //         "fee_use_coupon":false,
        //         "fee_coin_type":"USDT",
        //         "index_price":"",
        //         "self_trade":false
        //     }
        //
        $id = $this->safe_string($trade, 'trade_id');
        $marketId = $this->safe_string($trade, 'instrument_name');
        $symbol = $this->safe_symbol($marketId, $market);
        $timestamp = $this->safe_integer($trade, 'timestamp');
        $side = $this->safe_string($trade, 'direction');
        $priceString = $this->safe_string($trade, 'price');
        $amountString = $this->safe_string($trade, 'amount');
        $takerOrMaker = $this->safe_string($trade, 'role');
        $feeCostString = $this->safe_string($trade, 'fee');
        $fee = null;
        if ($feeCostString !== null) {
            $feeCurrencyId = $this->safe_string($trade, 'fee_coin_type');
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
            $fee = array(
                'cost' => $feeCostString,
                'currency' => $feeCurrencyCode,
            );
        }
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'order' => $this->safe_string($trade, 'order_id'),
            'type' => $this->safe_string($trade, 'order_type'),
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => null,
            'fee' => $fee,
        ), $market);
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'instrument_name' => $market['id'],
                // 'start_id' : 0,
                // 'end_id' => 0,
                // 'sorting' => 'asc', // asc | desc
            );
            if ($limit !== null) {
                $request['count'] = $limit; // default 10
            }
            $response = Async\await($this->publicGetGetLastTradesByInstrument (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result', array());
            //
            //     {
            //         "jsonrpc":"2.0",
            //         "usIn":1647582703220,
            //         "usOut":1647582703253,
            //         "usDiff":33,
            //         "result":{
            //             "trades":[array(
            //                 "amount":"0.0003",
            //                 "direction":"sell",
            //                 "iv":"0",
            //                 "price":"40767.18",
            //                 "timestamp":"1647582687050",
            //                 "instrument_name":"BTC-USDT-SPOT",
            //                 "trade_id":57499240
            //             )],
            //             "has_more":true
            //         }
            //     }
            //
            $trades = $this->safe_value($result, 'trades', array());
            return $this->parse_trades($trades, $market, $since, $limit);
        }) ();
    }

    public function sign_in($params = array ()) {
        return Async\async(function () use ($params) {
            $accessToken = $this->safe_string($this->options, 'accessToken');
            if ($accessToken !== null) {
                return $accessToken;
            }
            $this->check_required_credentials();
            $request = array(
                'grant_type' => 'client_credentials', // client_signature || refresh_token
                'client_id' => $this->apiKey,
                'client_secret' => $this->secret,
                // 'refresh_token' => '', // Required for grant type refresh_token
                // 'signature' => '', // Required for grant type client_signature
            );
            $response = Async\await($this->publicPostAuth (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result');
            //
            //     {
            //         jsonrpc => '2.0',
            //         usIn => '1647601525586',
            //         usOut => '1647601525597',
            //         usDiff => '11',
            //         $result => {
            //         access_token => '',
            //         token_type => 'bearer',
            //         refresh_token => '',
            //         expires_in => '604799',
            //         scope => 'account:read_write block_trade:read_write trade:read_write wallet:read_write'
            //         }
            //     }
            //
            $accessToken = $this->safe_string($result, 'access_token');
            $this->options['accessToken'] = $accessToken;
            return $accessToken;
        }) ();
    }

    public function parse_balance($response) {
        //
        //     {
        //         "WALLET":array(
        //             "total":"0",
        //             "coupon":"0",
        //             "details":[array(
        //                 "available":"0",
        //                 "freeze":"0",
        //                 "coin_type":"1INCH",
        //                 "current_mark_price":"1.657"
        //             )]
        //         ),
        //         "MARGIN":array(
        //             "total":"0",
        //             "net":"0",
        //             "available":"0",
        //             "borrowed":"0",
        //             "details":array(),
        //             "maintenance_margin":"0",
        //             "interest_owed":"0"
        //         ),
        //         "SPOT":array(
        //             "total":"3.965",
        //             "available":"15.887066",
        //             "details":[array(
        //                 "available":"0",
        //                 "freeze":"0",
        //                 "total":"0",
        //                 "coin_type":"1INCH",
        //                 "current_mark_price":"1.657"
        //             )]
        //         ),
        //         "BTC":array(
        //             "currency":"BTC",
        //             "balance":"0",
        //             "freeze":"0",
        //             "equity":"0",
        //             "base_currency":"USDT",
        //             "available_funds":"0",
        //             "available_withdrawal_funds":"0",
        //             "initial_margin":"0",
        //             "maintenance_margin":"0",
        //             "margin_balance":"0",
        //             "session_funding":"0",
        //             "session_rpl":"0",
        //             "session_upl":"0",
        //             "futures_pl":"0",
        //             "futures_session_rpl":"0",
        //             "futures_session_upl":"0",
        //             "options_value":"0",
        //             "options_pl":"0",
        //             "options_session_rpl":"0",
        //             "options_session_upl":"0",
        //             "total_pl":"0",
        //             "options_delta":"0",
        //             "options_gamma":"0",
        //             "options_theta":"0",
        //             "options_vega":"0",
        //             "delta_total":"0"
        //         ),
        //         "ETH":array(
        //             "currency":"ETH",
        //             "balance":"0",
        //             "freeze":"0",
        //             "equity":"0",
        //             "base_currency":"USDT",
        //             "available_funds":"0",
        //             "available_withdrawal_funds":"0",
        //             "initial_margin":"0",
        //             "maintenance_margin":"0",
        //             "margin_balance":"0",
        //             "session_funding":"0",
        //             "session_rpl":"0",
        //             "session_upl":"0",
        //             "futures_pl":"0",
        //             "futures_session_rpl":"0",
        //             "futures_session_upl":"0",
        //             "options_value":"0",
        //             "options_pl":"0",
        //             "options_session_rpl":"0",
        //             "options_session_upl":"0",
        //             "total_pl":"0",
        //             "options_delta":"0",
        //             "options_gamma":"0",
        //             "options_theta":"0",
        //             "options_vega":"0",
        //             "delta_total":"0"
        //         ),
        //         "PERPETUAL":{
        //             "bonus":"0",
        //             "global_state":0,
        //             "available_funds":"0",
        //             "wallet_balance":"0",
        //             "available_withdraw_funds":"0",
        //             "total_pl":"0",
        //             "total_upl":"0",
        //             "position_rpl":"0",
        //             "total_upl_isolated":"0",
        //             "total_upl_cross":"0",
        //             "total_initial_margin_cross":"0",
        //             "total_initial_margin_isolated":"0",
        //             "total_margin_balance_isolated":"0",
        //             "total_margin_balance":"0",
        //             "total_margin_balance_cross":"0",
        //             "total_maintenance_margin_cross":"0",
        //             "total_wallet_balance_isolated":"0",
        //             "order_frozen":"0",
        //             "order_cross_frozen":"0",
        //             "order_isolated_frozen":"0",
        //             "risk_level":"0",
        //             "bonus_max":"0"
        //         }
        //     }
        //
        $result = array( 'info' => $response );
        $assetTypes = is_array($response) ? array_keys($response) : array();
        for ($i = 0; $i < count($assetTypes); $i++) {
            $assetType = $assetTypes[$i];
            $currency = $this->safe_value($response, $assetType);
            if (($assetType === 'WALLET') || ($assetType === 'SPOT')) {
                $details = $this->safe_value($currency, 'details');
                if ($details !== null) {
                    for ($i = 0; $i < count($details); $i++) {
                        $detail = $details[$i];
                        $coinType = $this->safe_string($detail, 'coin_type');
                        $code = $this->safe_currency_code($coinType);
                        $account = $this->safe_value($result, $code, $this->account());
                        $account['free'] = $this->safe_string($detail, 'available');
                        $account['used'] = $this->safe_string($detail, 'freeze');
                        $account['total'] = $this->safe_string($detail, 'total');
                        $result[$code] = $account;
                    }
                }
            } else {
                // all other wallets are linear futures
                $code = 'USDT';
                $account = $this->account();
                $account['total'] = $this->safe_string($currency, 'wallet_balance');
                $account['free'] = $this->safe_string($currency, 'available_withdraw_funds');
                $result[$code] = $account;
            }
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()) {
        return Async\async(function () use ($params) {
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $type = $this->safe_string_lower($params, 'type', 'spot');
            $types = $this->safe_value($this->options, 'accountsByType', array());
            $assetType = $this->safe_string($types, $type, $type);
            $params = $this->omit($params, 'type');
            $request = array(
                'asset_type' => array( $assetType ),
            );
            $response = Async\await($this->privatePostGetAssetsInfo (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result', array());
            //
            //     {
            //         "id":"1647675393",
            //         "jsonrpc":"2.0",
            //         "usIn":1647675394091,
            //         "usOut":1647675394104,
            //         "usDiff":13,
            //         "result":{
            //             "WALLET":array(
            //                 "total":"0",
            //                 "coupon":"0",
            //                 "details":[array(
            //                     "available":"0",
            //                     "freeze":"0",
            //                     "coin_type":"1INCH",
            //                     "current_mark_price":"1.657"
            //                 )]
            //             ),
            //             "MARGIN":array(
            //                 "total":"0",
            //                 "net":"0",
            //                 "available":"0",
            //                 "borrowed":"0",
            //                 "details":array(),
            //                 "maintenance_margin":"0",
            //                 "interest_owed":"0"
            //             ),
            //             "SPOT":array(
            //                 "total":"3.965",
            //                 "available":"15.887066",
            //                 "details":[array(
            //                     "available":"0",
            //                     "freeze":"0",
            //                     "total":"0",
            //                     "coin_type":"1INCH",
            //                     "current_mark_price":"1.657"
            //                 )]
            //             ),
            //             "BTC":array(
            //                 "currency":"BTC",
            //                 "balance":"0",
            //                 "freeze":"0",
            //                 "equity":"0",
            //                 "base_currency":"USDT",
            //                 "available_funds":"0",
            //                 "available_withdrawal_funds":"0",
            //                 "initial_margin":"0",
            //                 "maintenance_margin":"0",
            //                 "margin_balance":"0",
            //                 "session_funding":"0",
            //                 "session_rpl":"0",
            //                 "session_upl":"0",
            //                 "futures_pl":"0",
            //                 "futures_session_rpl":"0",
            //                 "futures_session_upl":"0",
            //                 "options_value":"0",
            //                 "options_pl":"0",
            //                 "options_session_rpl":"0",
            //                 "options_session_upl":"0",
            //                 "total_pl":"0",
            //                 "options_delta":"0",
            //                 "options_gamma":"0",
            //                 "options_theta":"0",
            //                 "options_vega":"0",
            //                 "delta_total":"0"
            //             ),
            //             "ETH":array(
            //                 "currency":"ETH",
            //                 "balance":"0",
            //                 "freeze":"0",
            //                 "equity":"0",
            //                 "base_currency":"USDT",
            //                 "available_funds":"0",
            //                 "available_withdrawal_funds":"0",
            //                 "initial_margin":"0",
            //                 "maintenance_margin":"0",
            //                 "margin_balance":"0",
            //                 "session_funding":"0",
            //                 "session_rpl":"0",
            //                 "session_upl":"0",
            //                 "futures_pl":"0",
            //                 "futures_session_rpl":"0",
            //                 "futures_session_upl":"0",
            //                 "options_value":"0",
            //                 "options_pl":"0",
            //                 "options_session_rpl":"0",
            //                 "options_session_upl":"0",
            //                 "total_pl":"0",
            //                 "options_delta":"0",
            //                 "options_gamma":"0",
            //                 "options_theta":"0",
            //                 "options_vega":"0",
            //                 "delta_total":"0"
            //             ),
            //             "PERPETUAL":{
            //                 "bonus":"0",
            //                 "global_state":0,
            //                 "available_funds":"0",
            //                 "wallet_balance":"0",
            //                 "available_withdraw_funds":"0",
            //                 "total_pl":"0",
            //                 "total_upl":"0",
            //                 "position_rpl":"0",
            //                 "total_upl_isolated":"0",
            //                 "total_upl_cross":"0",
            //                 "total_initial_margin_cross":"0",
            //                 "total_initial_margin_isolated":"0",
            //                 "total_margin_balance_isolated":"0",
            //                 "total_margin_balance":"0",
            //                 "total_margin_balance_cross":"0",
            //                 "total_maintenance_margin_cross":"0",
            //                 "total_wallet_balance_isolated":"0",
            //                 "order_frozen":"0",
            //                 "order_cross_frozen":"0",
            //                 "order_isolated_frozen":"0",
            //                 "risk_level":"0",
            //                 "bonus_max":"0"
            //             }
            //         }
            //     }
            //
            return $this->parse_balance($result);
        }) ();
    }

    public function parse_order_status($status) {
        $statuses = array(
            'open' => 'open',
            'cancelled' => 'canceled',
            'filled' => 'closed',
            'rejected' => 'rejected',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_time_in_force($timeInForce) {
        if ($timeInForce === '-') {
            return null;
        }
        $timeInForces = array(
            'good_til_cancelled' => 'GTC',
            'good_til_date' => 'GTD',
            'fill_or_kill' => 'FOK',
            'immediate_or_cancel' => 'IOC',
        );
        return $this->safe_string($timeInForces, $timeInForce, $timeInForce);
    }

    public function parse_order($order, $market = null) {
        //
        // fetchOrder || fetchOpenOrders || fetchClosedOrders
        //         {
        //             "kind":"spot",
        //             "direction":"sell",
        //             "amount":"0.02",
        //             "price":"900",
        //             "advanced":"usdt",
        //             "source":"api",
        //             "mmp":false,
        //             "version":1,
        //             "order_id":"250971492850401280",
        //             "order_state":"open",
        //             "instrument_name":"BNB-USDT-SPOT",
        //             "filled_amount":"0",
        //             "average_price":"0",
        //             "order_type":"limit",
        //             "time_in_force":"GTC",
        //             "post_only":false,
        //             "reduce_only":false,
        //             "creation_timestamp":1647666666723,
        //             "last_update_timestamp":1647666666725
        //         }
        //
        // createOrder
        //
        //         {
        //             "order_id":"251052889774161920",
        //             "custom_order_id":"-"
        //         }
        //
        // closeOrder
        //         {
        //             "order_id":"250979354159153152"
        //         }
        //
        $timestamp = $this->safe_integer($order, 'creation_timestamp');
        $lastUpdate = $this->safe_integer($order, 'last_update_timestamp');
        $id = $this->safe_string($order, 'order_id');
        $priceString = $this->safe_string($order, 'price');
        if ($priceString === '-1') {
            $priceString = null;
        }
        $averageString = $this->safe_string($order, 'average_price');
        $amountString = $this->safe_string($order, 'amount');
        $filledString = $this->safe_string($order, 'filled_amount');
        $status = $this->parse_order_status($this->safe_string($order, 'order_state'));
        $marketId = $this->safe_string($order, 'instrument_name');
        $market = $this->safe_market($marketId, $market);
        $side = $this->safe_string_lower($order, 'direction');
        $feeCostString = $this->safe_string($order, 'commission');
        $fee = null;
        if ($feeCostString !== null) {
            $feeCostString = Precise::string_abs($feeCostString);
            $fee = array(
                'cost' => $feeCostString,
                'currency' => $market['base'],
            );
        }
        // injected in createOrder
        $trades = $this->safe_value($order, 'trades');
        $stopPrice = $this->safe_number($order, 'trigger_price');
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $lastUpdate,
            'symbol' => $market['symbol'],
            'type' => $this->safe_string($order, 'order_type'),
            'timeInForce' => $this->parse_time_in_force($this->safe_string($order, 'time_in_force')),
            'postOnly' => $this->safe_value($order, 'post_only'),
            'side' => $side,
            'price' => $this->parse_number($priceString),
            'stopPrice' => $stopPrice,
            'triggerPrice' => $stopPrice,
            'stopLossPrice' => $this->safe_number($order, 'stop_loss_price'),
            'takeProfitPrice' => $this->safe_number($order, 'take_profit_price'),
            'amount' => $amountString,
            'cost' => null,
            'average' => $averageString,
            'filled' => $filledString,
            'remaining' => null,
            'status' => $status,
            'fee' => $fee,
            'trades' => $trades,
        ), $market);
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $request = array(
                'order_id' => $id,
            );
            $response = Async\await($this->privateGetGetOrderState (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result');
            //
            //     {
            //         "jsonrpc":"2.0",
            //         "usIn":1647672034018,
            //         "usOut":1647672034033,
            //         "usDiff":15,
            //         "result":{
            //             "currency":"SPOT",
            //             "kind":"spot",
            //             "direction":"sell",
            //             "amount":"0.03",
            //             "price":"-1",
            //             "advanced":"usdt",
            //             "source":"api",
            //             "mmp":false,
            //             "version":1,
            //             "order_id":"250979478947823616",
            //             "order_state":"filled",
            //             "instrument_name":"BNB-USDT-SPOT",
            //             "filled_amount":"0.03",
            //             "average_price":"397.8",
            //             "order_type":"market",
            //             "time_in_force":"GTC",
            //             "post_only":false,
            //             "reduce_only":false,
            //             "creation_timestamp":1647668570759,
            //             "last_update_timestamp":1647668570761
            //         }
            //     }
            //
            return $this->parse_order($result);
        }) ();
    }

    public function create_order(string $symbol, $type, string $side, $amount, $price = null, $params = array ()) {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade $order
             * @param {string} $symbol unified $symbol of the $market to create an $order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of the base currency
             * @param {float|null} $price the $price at which the $order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} $params extra parameters specific to the btcex api endpoint
             * ----------------- Exchange Specific Parameters -----------------
             * @param {float|null} $params->cost $amount in USDT to spend for $market orders
             * @param {float|null} $params->triggerPrice $price to trigger stop orders
             * @param {float|null} $params->stopPrice $price to trigger stop orders
             * @param {float|null} $params->stopLossPrice $price to trigger stop-loss orders (only for perpetuals)
             * @param {float|null} $params->takeProfitPrice $price to trigger take-profit orders (only for perpetuals)
             * @param {array|null} $params->stopLoss for setting a stop-loss attached to an $order, set the value of the stopLoss key 'price' (only for perpetuals)
             * @param {array|null} $params->takeProfit for setting a take-profit attached to an $order, set the value of the takeProfit key 'price' (only for perpetuals)
             * @param {int|null} $params->trigger_price_type 1 => mark-$price, 2 => last-$price-> (only for perpetuals)
             * @param {int|null} $params->stop_loss_type 1 => mark-$price, 2 => last-$price (only for perpetuals)
             * @param {int|null} $params->take_profit_type 1 => mark-$price, 2 => last-$price (only for perpetuals)
             * @param {bool|null} $params->market_amount_order if set to trueï¼Œthen the $amount field means USDT value (only for perpetuals)
             * @param {string|null} $params->condition_type 'NORMAL', 'STOP', 'TRAILING', 'IF_TOUCHED'
             * @param {string|null} $params->position_side 'BOTH', for one-way mode 'LONG' or 'SHORT', for hedge-mode
             * @param {string|null} $params->timeInForce 'GTC', 'IOC', 'FOK'
             * @param {bool|null} $params->postOnly
             * @param {bool|null} $params->reduceOnly
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=$order-structure $order structure~
             */
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'instrument_name' => $market['id'],
                'type' => $type,
            );
            if ($side === 'sell' || $type === 'limit') {
                $request['amount'] = $this->amount_to_precision($symbol, $amount);
            }
            if ($type === 'limit') {
                $request['price'] = $this->price_to_precision($symbol, $price);
            } else {
                $costParam = $this->safe_number($params, 'cost');
                $amountString = $this->number_to_string($amount);
                $priceString = $this->number_to_string($price);
                $cost = $this->parse_number(Precise::string_mul($amountString, $priceString), $costParam);
                if ($market['swap']) {
                    if ($cost !== null) {
                        $request['amount'] = $this->price_to_precision($symbol, $cost);
                        $request['market_amount_order'] = true;
                    } else {
                        $request['market_amount_order'] = false;
                        $request['amount'] = $this->amount_to_precision($symbol, $amount);
                    }
                } else {
                    if ($side === 'buy') {
                        $createMarketBuyOrderRequiresPrice = $this->safe_value($this->options, 'createMarketBuyOrderRequiresPrice', true);
                        if ($createMarketBuyOrderRequiresPrice) {
                            if ($cost === null) {
                                throw new InvalidOrder($this->id . ' createOrder() requires a $price argument for $market buy orders on spot markets to calculate the total $amount to spend ($amount * $price), alternatively set the $createMarketBuyOrderRequiresPrice option to false and pass in the $cost to spend into the $amount parameter');
                            } else {
                                $request['amount'] = $this->price_to_precision($symbol, $cost);
                            }
                        } else {
                            $request['amount'] = $this->price_to_precision($symbol, $amount);
                        }
                    }
                }
                $params = $this->omit($params, 'cost');
            }
            if ($market['swap']) {
                $timeInForce = $this->safe_string_upper($params, 'timeInForce');
                if ($timeInForce === 'GTC') {
                    $request['time_in_force'] = 'good_till_cancelled';
                } elseif ($timeInForce === 'FOK') {
                    $request['time_in_force'] = 'fill_or_kill';
                } elseif ($timeInForce === 'IOC') {
                    $request['time_in_force'] = 'immediate_or_cancel';
                }
                $isMarketOrder = $type === 'market';
                $exchangeSpecificParam = $this->safe_value($params, 'post_only', false);
                $postOnly = $this->is_post_only($isMarketOrder, $exchangeSpecificParam, $params);
                if ($postOnly) {
                    $request['post_only'] = true;
                }
                $reduceOnly = $this->safe_value($params, 'reduceOnly', false);
                if ($reduceOnly) {
                    $request['reduce_only'] = true;
                }
                if ($side === 'buy') {
                    $requestType = ($reduceOnly) ? 'SHORT' : 'LONG';
                    $request['position_side'] = $requestType;
                } else {
                    $requestType = ($reduceOnly) ? 'LONG' : 'SHORT';
                    $request['position_side'] = $requestType;
                }
                $stopPrice = $this->safe_number_2($params, 'triggerPrice', 'stopPrice');
                $stopLossPrice = $this->safe_number($params, 'stopLossPrice');
                $takeProfitPrice = $this->safe_number($params, 'takeProfitPrice');
                $isStopLoss = $this->safe_value($params, 'stopLoss');
                $isTakeProfit = $this->safe_value($params, 'takeProfit');
                if ($stopPrice) {
                    $request['condition_type'] = 'STOP';
                    $request['trigger_price'] = $this->price_to_precision($symbol, $stopPrice);
                    $request['trigger_price_type'] = 1;
                } elseif ($stopLossPrice || $takeProfitPrice) {
                    $request['condition_type'] = 'STOP';
                    if ($stopLossPrice) {
                        $request['trigger_price'] = $this->price_to_precision($symbol, $stopLossPrice);
                    } else {
                        $request['trigger_price'] = $this->price_to_precision($symbol, $takeProfitPrice);
                    }
                    $request['reduce_only'] = true;
                    $request['trigger_price_type'] = 1;
                } elseif ($isStopLoss || $isTakeProfit) {
                    if ($isStopLoss) {
                        $stopLossPrice = $this->safe_number($isStopLoss, 'price');
                        $request['stop_loss_price'] = $this->price_to_precision($symbol, $stopLossPrice);
                        $request['stop_loss_type'] = 1;
                    } else {
                        $takeProfitPrice = $this->safe_number($isTakeProfit, 'price');
                        $request['take_profit_price'] = $this->price_to_precision($symbol, $takeProfitPrice);
                        $request['take_profit_type'] = 1;
                    }
                }
                $params = $this->omit($params, array( 'timeInForce', 'postOnly', 'reduceOnly', 'stopPrice', 'triggerPrice', 'stopLossPrice', 'takeProfitPrice', 'stopLoss', 'takeProfit' ));
            }
            $method = 'privatePost' . $this->capitalize($side);
            $response = Async\await($this->$method (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result', array());
            //
            //     {
            //         "id":"1647686073",
            //         "jsonrpc":"2.0",
            //         "usIn":1647686073252,
            //         "usOut":1647686073264,
            //         "usDiff":12,
            //         "result":{
            //             "order":{
            //                 "order_id":"251052889774161920",
            //                 "custom_order_id":"-"
            //             }
            //         }
            //     }
            //
            $order = $this->safe_value($result, 'order');
            return $this->parse_order($order, $market);
        }) ();
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $request = array(
                'order_id' => $id,
            );
            $response = Async\await($this->privatePostCancel (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result', array());
            //
            //     {
            //         "id":"1647675007",
            //         "jsonrpc":"2.0",
            //         "usIn":1647675007485,
            //         "usOut":1647675007494,
            //         "usDiff":9,
            //         "result":{
            //             "order_id":"250979354159153152"
            //         }
            //     }
            //
            return $this->parse_order($result);
        }) ();
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelAllOrders() requires a $symbol argument');
            }
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'instrument_name' => $market['id'],
            );
            $response = Async\await($this->privatePostCancelAllByInstrument (array_merge($request, $params)));
            //
            //     {
            //         "id":"1647686580",
            //         "jsonrpc":"2.0",
            //         "usIn":1647686581216,
            //         "usOut":1647686581224,
            //         "usDiff":8,
            //         "result":2
            //     }
            //
            return $response;
        }) ();
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchOpenOrders() requires a $symbol argument');
            }
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'instrument_name' => $market['id'],
            );
            $response = Async\await($this->privateGetGetOpenOrdersByInstrument (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result', array());
            //
            //     {
            //         "jsonrpc":"2.0",
            //         "usIn":1647667026285,
            //         "usOut":1647667026291,
            //         "usDiff":6,
            //         "result":[array(
            //             "kind":"spot",
            //             "direction":"sell",
            //             "amount":"0.02",
            //             "price":"900",
            //             "advanced":"usdt",
            //             "source":"api",
            //             "mmp":false,
            //             "version":1,
            //             "order_id":"250971492850401280",
            //             "order_state":"open",
            //             "instrument_name":"BNB-USDT-SPOT",
            //             "filled_amount":"0",
            //             "average_price":"0",
            //             "order_type":"limit",
            //             "time_in_force":"GTC",
            //             "post_only":false,
            //             "reduce_only":false,
            //             "creation_timestamp":1647666666723,
            //             "last_update_timestamp":1647666666725
            //         )]
            //     }
            //
            return $this->parse_orders($result, $market, $since, $limit);
        }) ();
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchClosedOrders() requires a $symbol argument');
            }
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'instrument_name' => $market['id'],
            );
            if ($limit !== null) {
                $request['count'] = $limit;
            }
            $response = Async\await($this->privateGetGetOrderHistoryByInstrument (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result', array());
            //
            //     {
            //         "jsonrpc":"2.0",
            //         "usIn":1647671721716,
            //         "usOut":1647671721730,
            //         "usDiff":14,
            //         "result":[array(
            //             "currency":"SPOT",
            //             "kind":"spot",
            //             "direction":"sell",
            //             "amount":"0.03",
            //             "price":"-1",
            //             "advanced":"usdt",
            //             "source":"api",
            //             "mmp":false,
            //             "version":1,
            //             "order_id":"250979478947823616",
            //             "order_state":"filled",
            //             "instrument_name":"BNB-USDT-SPOT",
            //             "filled_amount":"0.03",
            //             "average_price":"397.8",
            //             "order_type":"market",
            //             "time_in_force":"GTC",
            //             "post_only":false,
            //             "reduce_only":false,
            //             "creation_timestamp":1647668570759,
            //             "last_update_timestamp":1647668570761
            //         )]
            //     }
            //
            return $this->parse_orders($result, $market, $since, $limit);
        }) ();
    }

    public function fetch_order_trades(string $id, ?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $since, $limit, $params) {
            if ($id === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrderTrades() requires a $id argument');
            }
            Async\await($this->load_markets());
            $request = array(
                'order_id' => $id,
                // 'start_id' => 0, // The ID number of the first trade to be returned
                // 'end_id' => 0, // The ID number of the last trade to be returned
                // 'sorting' => '', // Direction of results sorting,default => desc
            );
            if ($limit !== null) {
                $request['count'] = $limit; // default 20
            }
            $response = Async\await($this->privateGetGetUserTradesByOrder (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result', array());
            //
            //     {
            //         "jsonrpc":"2.0",
            //         "usIn":1647671425457,
            //         "usOut":1647671425470,
            //         "usDiff":13,
            //         "result":{
            //             "count":1,
            //             "trades":[array(
            //                 "direction":"sell",
            //                 "amount":"0.03",
            //                 "price":"397.8",
            //                 "fee":"0.011934",
            //                 "timestamp":1647668570759,
            //                 "role":"taker",
            //                 "trade_id":"58319385",
            //                 "order_id":"250979478947823616",
            //                 "instrument_name":"BNB-USDT-SPOT",
            //                 "order_type":"market",
            //                 "fee_use_coupon":false,
            //                 "fee_coin_type":"USDT",
            //                 "index_price":"",
            //                 "self_trade":false
            //             )],
            //             "has_more":false
            //         }
            //     }
            //
            $trades = $this->safe_value($result, 'trades', array());
            return $this->parse_trades($trades, null, $since, $limit);
        }) ();
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a id argument');
            }
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $request = array(
                // 'kind' => '', // The order kind, eg. margin, spot, option, future, perpetual. only used when call privateGetGetUserTradesByCurrency
                // 'start_id' => 0, // The ID number of the first trade to be returned
                // 'end_id' => 0, // The ID number of the last trade to be returned
                // 'sorting' => '', // Direction of results sorting,default => desc
                // 'self_trade' => false, // If not set, query all
                // 'start_timestamp' => false // The trade time of the first trade to be returned
                // 'end_timestamp' => false // The trade time of the last trade to be returned
            );
            $market = $this->market($symbol);
            $request['instrument_name'] = $market['id'];
            if ($limit !== null) {
                $request['count'] = $limit; // default 20
            }
            if ($since !== null) {
                $request['start_timestamp'] = $since;
            }
            $response = Async\await($this->privateGetGetUserTradesByInstrument (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result', array());
            //
            //     {
            //         "jsonrpc":"2.0",
            //         "usIn":1647668582167,
            //         "usOut":1647668582187,
            //         "usDiff":20,
            //         "result":{
            //             "count":1,
            //             "trades":[array(
            //                 "direction":"sell",
            //                 "amount":"0.03",
            //                 "price":"397.8",
            //                 "fee":"0.011934",
            //                 "timestamp":1647668570759,
            //                 "role":"taker",
            //                 "trade_id":"58319385",
            //                 "order_id":"250979478947823616",
            //                 "instrument_name":"BNB-USDT-SPOT",
            //                 "order_type":"market",
            //                 "fee_use_coupon":false,
            //                 "fee_coin_type":"USDT",
            //                 "index_price":"",
            //                 "self_trade":false
            //             )],
            //             "has_more":false
            //         }
            //     }
            //
            $trades = $this->safe_value($result, 'trades', array());
            return $this->parse_trades($trades, $market, $since, $limit);
        }) ();
    }

    public function parse_position($position, $market = null) {
        //
        //     {
        //         "currency":"PERPETUAL",
        //         "kind":"perpetual",
        //         "size":"-0.08",
        //         "direction":"sell",
        //         "leverage":"3",
        //         "margin":"10.7724",
        //         "version":"553",
        //         "roe":"-0.000483",
        //         "traceType":0,
        //         "pos_id":"0",
        //         "instrument_name":"BNB-USDT-PERPETUAL",
        //         "average_price":"403.9",
        //         "mark_price":"403.965",
        //         "initial_margin":"10.77066668",
        //         "maintenance_margin":"0.2100618",
        //         "floating_profit_loss":"-0.0052",
        //         "liquid_price":"549.15437158",
        //         "margin_type":"cross",
        //         "risk_level":"0.017651",
        //         "available_withdraw_funds":"1.13004332",
        //         "order_id":"251085320510201856",
        //         "stop_loss_price":"0",
        //         "stop_loss_type":1,
        //         "take_profit_price":"0",
        //         "take_profit_type":1
        //     }
        //
        $contract = $this->safe_string($position, 'instrument_name');
        $market = $this->safe_market($contract, $market);
        $size = $this->safe_string($position, 'size');
        $side = $this->safe_string($position, 'direction');
        $side = ($side === 'buy') ? 'long' : 'short';
        $maintenanceMarginString = $this->safe_string($position, 'maintenance_margin');
        $riskLevel = $this->safe_string($position, 'risk_level');
        // maint_margin / $collateral = risk_level
        // $collateral = maint_margin / risk_level
        $collateral = Precise::string_div($maintenanceMarginString, $riskLevel);
        $markPrice = $this->safe_string($position, 'mark_price');
        $notionalString = Precise::string_mul($markPrice, $size);
        $unrealisedPnl = $this->safe_string($position, 'floating_profit_loss');
        $initialMarginString = $this->safe_string($position, 'initial_margin');
        $marginType = $this->safe_string($position, 'margin_type');
        return $this->safe_position(array(
            'info' => $position,
            'id' => null,
            'symbol' => $this->safe_string($market, 'symbol'),
            'timestamp' => null,
            'datetime' => null,
            'lastUpdateTimestamp' => null,
            'initialMargin' => $this->parse_number($initialMarginString),
            'initialMarginPercentage' => $this->parse_number(Precise::string_div($initialMarginString, $notionalString)),
            'maintenanceMargin' => $this->parse_number($maintenanceMarginString),
            'maintenanceMarginPercentage' => $this->parse_number(Precise::string_div($maintenanceMarginString, $notionalString)),
            'entryPrice' => $this->safe_number($position, 'average_price'),
            'notional' => $this->parse_number($notionalString),
            'leverage' => $this->safe_number($position, 'leverage'),
            'unrealizedPnl' => $this->parse_number($unrealisedPnl),
            'contracts' => $this->parse_number($size),  // in USD for perpetuals on deribit
            'contractSize' => $this->safe_value($market, 'contractSize'),
            'marginRatio' => $this->parse_number($riskLevel),
            'liquidationPrice' => $this->safe_number($position, 'liquid_price'),
            'markPrice' => $this->parse_number($markPrice),
            'lastPrice' => null,
            'collateral' => $this->parse_number($collateral),
            'marginType' => $marginType,
            'side' => $side,
            'percentage' => null,
        ));
    }

    public function fetch_position(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'instrument_name' => $market['id'],
            );
            $response = Async\await($this->privateGetGetPosition (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result');
            //
            //     {
            //         "jsonrpc":"2.0",
            //         "usIn":1647693832273,
            //         "usOut":1647693832282,
            //         "usDiff":9,
            //         "result":{
            //             "currency":"PERPETUAL",
            //             "kind":"perpetual",
            //             "size":"-0.08",
            //             "direction":"sell",
            //             "leverage":"3",
            //             "margin":"10.7724",
            //             "version":"553",
            //             "roe":"-0.000483",
            //             "traceType":0,
            //             "pos_id":"0",
            //             "instrument_name":"BNB-USDT-PERPETUAL",
            //             "average_price":"403.9",
            //             "mark_price":"403.965",
            //             "initial_margin":"10.77066668",
            //             "maintenance_margin":"0.2100618",
            //             "floating_profit_loss":"-0.0052",
            //             "liquid_price":"549.15437158",
            //             "margin_type":"cross",
            //             "risk_level":"0.017651",
            //             "available_withdraw_funds":"1.13004332",
            //             "order_id":"251085320510201856",
            //             "stop_loss_price":"0",
            //             "stop_loss_type":1,
            //             "take_profit_price":"0",
            //             "take_profit_type":1
            //         }
            //     }
            //
            return $this->parse_position($result);
        }) ();
    }

    public function fetch_positions(?array $symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $request = array(
                'currency' => 'PERPETUAL',
                // 'kind' : '', // option, future, spot, margin,perpetual The order kind
            );
            $response = Async\await($this->privateGetGetPositions (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result');
            //
            //     {
            //         "jsonrpc":"2.0",
            //         "usIn":1647694531356,
            //         "usOut":1647694531364,
            //         "usDiff":8,
            //         "result":[array(
            //             "currency":"PERPETUAL",
            //             "kind":"perpetual",
            //             "size":"-0.08",
            //             "direction":"sell",
            //             "leverage":"3",
            //             "margin":"10.7836",
            //             "version":"1251",
            //             "roe":"-0.003602",
            //             "traceType":0,
            //             "pos_id":"0",
            //             "instrument_name":"BNB-USDT-PERPETUAL",
            //             "average_price":"403.9",
            //             "mark_price":"404.385",
            //             "initial_margin":"10.77066668",
            //             "maintenance_margin":"0.2102802",
            //             "floating_profit_loss":"-0.0388",
            //             "liquid_price":"549.15437158",
            //             "margin_type":"cross",
            //             "risk_level":"0.01772",
            //             "available_withdraw_funds":"1.09644332",
            //             "order_id":"251085320510201856",
            //             "stop_loss_price":"0",
            //             "stop_loss_type":1,
            //             "take_profit_price":"0",
            //             "take_profit_type":1
            //         )]
            //     }
            //
            return $this->parse_positions($result, $symbols);
        }) ();
    }

    public function parse_transaction_status($status) {
        $states = array(
            'deposit_confirmed' => 'ok',
            'deposit_waiting_confirm' => 'pending',
            'withdraw_init' => 'pending',
            'withdraw_noticed_block_chain' => 'pending',
            'withdraw_waiting_confirm' => 'pending',
            'withdraw_confirmed' => 'ok',
            'withdraw_failed' => 'failed',
            'withdraw_auditing' => 'pending',
            'withdraw_audit_reject' => 'failed',
        );
        return $this->safe_string($states, $status, $status);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // fetchDeposits
        //         {
        //             "id":"250325458128736256",
        //             "amount":"0.04",
        //             "state":"deposit_confirmed",
        //             "coin_type":"BNB",
        //             "token_code":"BNB",
        //             "create_time":"1647512640040",
        //             "update_time":"1647512640053",
        //             "tx_hash":"",
        //             "full_name":"Binance Coin"
        //         }
        //
        // fetchWithdrawals || fetchWithdraw
        //         {
        //             "id":"251076247882829824",
        //             "address":"",
        //             "amount":"0.01",
        //             "state":"withdraw_auditing",
        //             "coin_type":"BNB",
        //             "create_time":"1647691642267",
        //             "update_time":"1647691650090",
        //             "full_name":"Binance Coin",
        //             "token_code":"BNB"
        //         }
        //
        $currencyId = $this->safe_string($transaction, 'coin_type');
        $code = $this->safe_currency_code($currencyId, $currency);
        $id = $this->safe_string($transaction, 'id');
        $txId = $this->safe_string($transaction, 'tx_hash');
        $timestamp = $this->safe_integer($transaction, 'create_time');
        $updated = $this->safe_integer($transaction, 'update_time');
        $amount = $this->safe_number($transaction, 'amount');
        $status = $this->safe_string($transaction, 'state');
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $txId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'network' => null,
            'addressFrom' => null,
            'address' => null,
            'addressTo' => null,
            'tagFrom' => null,
            'tag' => null,
            'tagTo' => null,
            'type' => null,
            'amount' => $amount,
            'currency' => $code,
            'status' => $this->parse_transaction_status($status),
            'updated' => $updated,
            'fee' => null,
        );
    }

    public function fetch_deposits(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($code, $since, $limit, $params) {
            if ($code === null) {
                throw new ArgumentsRequired($this->id . ' fetchDeposits() requires the $code argument');
            }
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $currency = $this->safe_currency($code);
            $request = array(
                'coin_type' => $currency['id'],
            );
            $response = Async\await($this->privateGetGetDepositRecord (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result', array());
            //
            //     {
            //         "jsonrpc":"2.0",
            //         "usIn":1647606752447,
            //         "usOut":1647606752457,
            //         "usDiff":10,
            //         "result":[array(
            //             "id":"250325458128736256",
            //             "amount":"0.04",
            //             "state":"deposit_confirmed",
            //             "coin_type":"BNB",
            //             "token_code":"BNB",
            //             "create_time":"1647512640040",
            //             "update_time":"1647512640053",
            //             "tx_hash":"",
            //             "full_name":"Binance Coin"
            //         )]
            //     }
            //     }
            //
            return $this->parse_transactions($result, $currency, $since, $limit, array( 'type' => 'deposit' ));
        }) ();
    }

    public function fetch_withdrawals(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($code, $since, $limit, $params) {
            if ($code === null) {
                throw new ArgumentsRequired($this->id . ' fetchWithdrawals() requires the $code argument');
            }
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $currency = $this->safe_currency($code);
            $request = array(
                'coin_type' => $currency['id'],
                // 'withdraw_id' => 0,
            );
            $response = Async\await($this->privateGetGetWithdrawRecord (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result', array());
            //
            //     {
            //         "jsonrpc":"2.0",
            //         "usIn":1647691750112,
            //         "usOut":1647691750125,
            //         "usDiff":13,
            //         "result":[array(
            //             "id":"251076247882829824",
            //             "address":"",
            //             "amount":"0.01",
            //             "state":"withdraw_auditing",
            //             "coin_type":"BNB",
            //             "create_time":"1647691642267",
            //             "update_time":"1647691650090",
            //             "full_name":"Binance Coin",
            //             "token_code":"BNB"
            //         )]
            //     }
            //
            return $this->parse_transactions($result, $currency, $since, $limit, array( 'type' => 'withdrawal' ));
        }) ();
    }

    public function fetch_withdrawal(string $id, ?string $code = null, $params = array ()) {
        return Async\async(function () use ($id, $code, $params) {
            if ($code === null) {
                throw new ArgumentsRequired($this->id . ' fetchWithdrawal() requires the $code argument');
            }
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $currency = $this->safe_currency($code);
            $request = array(
                'coin_type' => $currency['id'],
                'withdraw_id' => $id,
            );
            $response = Async\await($this->privateGetGetWithdrawRecord (array_merge($request, $params)));
            $result = $this->safe_value($response, 'result', array());
            //
            //     {
            //         "jsonrpc":"2.0",
            //         "usIn":1647691750112,
            //         "usOut":1647691750125,
            //         "usDiff":13,
            //         "result":[array(
            //             "id":"251076247882829824",
            //             "address":"",
            //             "amount":"0.01",
            //             "state":"withdraw_auditing",
            //             "coin_type":"BNB",
            //             "create_time":"1647691642267",
            //             "update_time":"1647691650090",
            //             "full_name":"Binance Coin",
            //             "token_code":"BNB"
            //         )]
            //     }
            //
            $records = $this->filter_by($result, 'id', $id);
            $record = $this->safe_value($records, 0);
            return $this->parse_transaction($record, $currency);
        }) ();
    }

    public function fetch_leverage(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * @see https://docs.btcex.com/#get-perpetual-instrument-config
             * fetch the set leverage for a $market
             * @param {string} $symbol unified $market $symbol
             * @param {array} $params extra parameters specific to the btcex api endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=leverage-structure leverage structure~
             */
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'instrument_name' => $market['id'],
            );
            $response = Async\await($this->privateGetGetPerpetualUserConfig (array_merge($request, $params)));
            //
            //     {
            //         "jsonrpc" => "2.0",
            //         "usIn" => 1674182494283,
            //         "usOut" => 1674182494294,
            //         "usDiff" => 11,
            //         "result" => {
            //             "margin_type" => "cross",
            //             "leverage" => "20",
            //             "instrument_name" => "BTC-USDT-PERPETUAL",
            //             "time" => "1674182494293"
            //         }
            //     }
            //
            $data = $this->safe_value($response, 'result', array());
            return $this->safe_number($data, 'leverage');
        }) ();
    }

    public function fetch_market_leverage_tiers(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * @see https://docs.btcex.com/#get-perpetual-instrument-leverage-config
             * retrieve information on the maximum leverage, for different trade sizes for a single $market
             * @param {string} $symbol unified $market $symbol
             * @param {array} $params extra parameters specific to the btcex api endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=leverage-tiers-structure leverage tiers structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if (!$market['swap']) {
                throw new BadRequest($this->id . ' fetchMarketLeverageTiers() supports swap markets only');
            }
            $request = array(
                'instrument_name' => $market['id'],
            );
            $response = Async\await($this->publicGetGetPerpetualLeverageBracket (array_merge($request, $params)));
            //
            //     {
            //         "jsonrpc" => "2.0",
            //         "usIn" => 1674184074454,
            //         "usOut" => 1674184074457,
            //         "usDiff" => 3,
            //         "result" => array(
            //             array(
            //                 "bracket" => 1,
            //                 "initialLeverage" => 125,
            //                 "maintenanceMarginRate" => "0.004",
            //                 "notionalCap" => "50000",
            //                 "notionalFloor" => "0",
            //                 "cum" => "0"
            //             ),
            //             ...
            //         )
            //     }
            //
            $data = $this->safe_value($response, 'result', array());
            return $this->parse_market_leverage_tiers($data, $market);
        }) ();
    }

    public function parse_market_leverage_tiers($info, $market = null) {
        //
        //     array(
        //         array(
        //             "bracket" => 1,
        //             "initialLeverage" => 125,
        //             "maintenanceMarginRate" => "0.004",
        //             "notionalCap" => "50000",
        //             "notionalFloor" => "0",
        //             "cum" => "0"
        //         ),
        //         ...
        //     )
        //
        $tiers = array();
        $brackets = $info;
        for ($i = 0; $i < count($brackets); $i++) {
            $tier = $brackets[$i];
            $tiers[] = array(
                'tier' => $this->safe_integer($tier, 'bracket'),
                'currency' => $market['settle'],
                'minNotional' => $this->safe_number($tier, 'notionalFloor'),
                'maxNotional' => $this->safe_number($tier, 'notionalCap'),
                'maintenanceMarginRate' => $this->safe_number($tier, 'maintenanceMarginRate'),
                'maxLeverage' => $this->safe_number($tier, 'initialLeverage'),
                'info' => $tier,
            );
        }
        return $tiers;
    }

    public function fetch_leverage_tiers(?array $symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            /**
             * @see https://docs.btcex.com/#get-all-perpetual-instrument-leverage-config
             * retrieve information on the maximum leverage, for different trade sizes
             * @param {[string]|null} $symbols a list of unified market $symbols
             * @param {array} $params extra parameters specific to the btcex api endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=leverage-tiers-structure leverage tiers structures~, indexed by market $symbols
             */
            Async\await($this->load_markets());
            $response = Async\await($this->publicGetGetPerpetualLeverageBracketAll ($params));
            //
            //     {
            //         "jsonrpc" => "2.0",
            //         "usIn" => 1674183578745,
            //         "usOut" => 1674183578752,
            //         "usDiff" => 7,
            //         "result" => {
            //             "WAVES-USDT-PERPETUAL" => array(
            //                 array(
            //                     "bracket" => 1,
            //                     "initialLeverage" => 50,
            //                     "maintenanceMarginRate" => "0.01",
            //                     "notionalCap" => "50000",
            //                     "notionalFloor" => "0",
            //                     "cum" => "0"
            //                 ),
            //                 ...
            //             )
            //         }
            //     }
            //
            $data = $this->safe_value($response, 'result', array());
            $symbols = $this->market_symbols($symbols);
            return $this->parse_leverage_tiers($data, $symbols, 'symbol');
        }) ();
    }

    public function parse_leverage_tiers($response, ?array $symbols = null, $marketIdKey = null) {
        //
        //     {
        //         "WAVES-USDT-PERPETUAL" => array(
        //             array(
        //                 "bracket" => 1,
        //                 "initialLeverage" => 50,
        //                 "maintenanceMarginRate" => "0.01",
        //                 "notionalCap" => "50000",
        //                 "notionalFloor" => "0",
        //                 "cum" => "0"
        //             ),
        //             ...
        //         )
        //     }
        //
        $tiers = array();
        $result = array();
        $marketIds = is_array($response) ? array_keys($response) : array();
        for ($i = 0; $i < count($marketIds); $i++) {
            $marketId = $marketIds[$i];
            $entry = $response[$marketId];
            $market = $this->safe_market($marketId);
            $symbol = $this->safe_symbol($marketId, $market);
            $symbolsLength = 0;
            $tiers[$symbol] = $this->parse_market_leverage_tiers($entry, $market);
            if ($symbols !== null) {
                $symbolsLength = count($symbols);
                if ($this->in_array($symbol, $symbols)) {
                    $result[$symbol] = $this->parse_market_leverage_tiers($entry, $market);
                }
            }
            if ($symbol !== null && ($symbolsLength === 0 || $this->in_array($symbol, $symbols))) {
                $result[$symbol] = $this->parse_market_leverage_tiers($entry, $market);
            }
        }
        return $result;
    }

    public function set_margin_mode($marginMode, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($marginMode, $symbol, $params) {
            /**
             * set margin mode to 'cross' or 'isolated'
             * @see https://docs.btcex.com/#modify-perpetual-instrument-margin-type
             * @param {string} $marginMode 'cross' or 'isolated'
             * @param {string|null} $symbol unified $market $symbol
             * @param {array} $params extra parameters specific to the btcex api endpoint
             * @return {array} response from the exchange
             */
            $this->check_required_symbol('setMarginMode', $symbol);
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if (!$market['swap']) {
                throw new BadRequest($this->id . ' setMarginMode() supports swap contracts only');
            }
            if (($marginMode !== 'isolated') && ($marginMode !== 'isolate') && ($marginMode !== 'cross')) {
                throw new BadRequest($this->id . ' $marginMode must be either isolated or cross');
            }
            $marginMode = ($marginMode === 'isolated') ? 'isolate' : 'cross';
            $request = array(
                'instrument_name' => $market['id'],
                'margin_type' => $marginMode,
            );
            $result = Async\await($this->privatePostAdjustPerpetualMarginType (array_merge($request, $params)));
            //
            //     {
            //         "id" => "1674857919",
            //         "jsonrpc" => "2.0",
            //         "usIn" => 1674857920070,
            //         "usOut" => 1674857920079,
            //         "usDiff" => 9,
            //         "result" => "ok"
            //     }
            //
            return $result;
        }) ();
    }

    public function set_leverage($leverage, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($leverage, $symbol, $params) {
            /**
             * set the $leverage amount for a $market
             * @see https://docs.btcex.com/#modify-perpetual-instrument-$leverage
             * @param {float} $leverage the rate of $leverage
             * @param {string} $symbol unified $market $symbol
             * @param {array} $params extra parameters specific to the btcex api endpoint
             * @return {array} $response from the exchange
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' setLeverage() requires a $symbol argument');
            }
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $this->check_required_symbol('setLeverage', $symbol);
            $market = $this->market($symbol);
            if (!$market['swap']) {
                throw new BadRequest($this->id . ' setLeverage() supports swap contracts only');
            }
            if (($leverage < 1) || ($leverage > 125)) {
                throw new BadRequest($this->id . ' $leverage should be between 1 and 125');
            }
            $request = array(
                'instrument_name' => $market['id'],
                'leverage' => $leverage,
            );
            $response = Async\await($this->privatePostAdjustPerpetualLeverage (array_merge($request, $params)));
            //
            //     {
            //         "id" => "1674856410",
            //         "jsonrpc" => "2.0",
            //         "usIn" => 1674856410930,
            //         "usOut" => 1674856410988,
            //         "usDiff" => 58,
            //         "result" => "ok"
            //     }
            //
            return $response;
        }) ();
    }

    public function fetch_funding_rates(?array $symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetch the current funding rates
             * @see https://docs.btcex.com/#contracts
             * @param {[string]} $symbols unified $market $symbols
             * @param {array} $params extra parameters specific to the btcex api endpoint
             * @return {[array]} an array of ~@link https://docs.ccxt.com/#/?id=funding-rate-structure funding rate structures~
             */
            Async\await($this->load_markets());
            $symbols = $this->market_symbols($symbols);
            $response = Async\await($this->publicGetCoinGeckoContracts ($params));
            //
            //     {
            //         "jsonrpc" => "2.0",
            //         "usIn" => 1674803585896,
            //         "usOut" => 1674803585943,
            //         "usDiff" => 47,
            //         "result" => array(
            //             array(
            //                 "ticker_id" => "BTC-USDT-PERPETUAL",
            //                 "base_currency" => "BTC",
            //                 "target_currency" => "USDT",
            //                 "last_price" => "23685",
            //                 "base_volume" => "167011.37199999999999989",
            //                 "target_volume" => "3837763191.33800288010388613",
            //                 "bid" => "23684.5",
            //                 "ask" => "23685",
            //                 "high" => "23971.5",
            //                 "low" => "23156",
            //                 "product_type" => "perpetual",
            //                 "open_interest" => "24242.36",
            //                 "index_price" => "23686.4",
            //                 "index_name" => "BTC-USDT",
            //                 "index_currency" => "BTC",
            //                 "start_timestamp" => 1631004005882,
            //                 "funding_rate" => "0.000187",
            //                 "next_funding_rate_timestamp" => 1675065600000,
            //                 "contract_type" => "Quanto",
            //                 "contract_price" => "23685",
            //                 "contract_price_currency" => "USDT"
            //             ),
            //         )
            //     }
            //
            $data = $this->safe_value($response, 'result', array());
            $result = array();
            for ($i = 0; $i < count($data); $i++) {
                $entry = $data[$i];
                $marketId = $this->safe_string($entry, 'ticker_id');
                $market = $this->safe_market($marketId);
                $symbol = $market['symbol'];
                if ($symbols !== null) {
                    if ($this->in_array($symbol, $symbols)) {
                        $result[$symbol] = $this->parse_funding_rate($entry, $market);
                    }
                } else {
                    $result[$symbol] = $this->parse_funding_rate($entry, $market);
                }
            }
            return $this->filter_by_array($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_funding_rate(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the current funding rate
             * @see https://docs.btcex.com/#contracts
             * @param {string} $symbol unified $market $symbol
             * @param {array} $params extra parameters specific to the btcex api endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-rate-structure funding rate structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $response = Async\await($this->publicGetCoinGeckoContracts ($params));
            //
            //     {
            //         "jsonrpc" => "2.0",
            //         "usIn" => 1674803585896,
            //         "usOut" => 1674803585943,
            //         "usDiff" => 47,
            //         "result" => array(
            //             array(
            //                 "ticker_id" => "BTC-USDT-PERPETUAL",
            //                 "base_currency" => "BTC",
            //                 "target_currency" => "USDT",
            //                 "last_price" => "23685",
            //                 "base_volume" => "167011.37199999999999989",
            //                 "target_volume" => "3837763191.33800288010388613",
            //                 "bid" => "23684.5",
            //                 "ask" => "23685",
            //                 "high" => "23971.5",
            //                 "low" => "23156",
            //                 "product_type" => "perpetual",
            //                 "open_interest" => "24242.36",
            //                 "index_price" => "23686.4",
            //                 "index_name" => "BTC-USDT",
            //                 "index_currency" => "BTC",
            //                 "start_timestamp" => 1631004005882,
            //                 "funding_rate" => "0.000187",
            //                 "next_funding_rate_timestamp" => 1675065600000,
            //                 "contract_type" => "Quanto",
            //                 "contract_price" => "23685",
            //                 "contract_price_currency" => "USDT"
            //             ),
            //         )
            //     }
            //
            $data = $this->safe_value($response, 'result', array());
            for ($i = 0; $i < count($data); $i++) {
                $entry = $data[$i];
                $marketId = $this->safe_string($entry, 'ticker_id');
                if ($marketId === $market['id']) {
                    return $this->parse_funding_rate($entry, $market);
                }
            }
            return $this->parse_funding_rate($data, $market);
        }) ();
    }

    public function parse_funding_rate($contract, $market = null) {
        //
        //     {
        //         "ticker_id" => "BTC-USDT-PERPETUAL",
        //         "base_currency" => "BTC",
        //         "target_currency" => "USDT",
        //         "last_price" => "23685",
        //         "base_volume" => "167011.37199999999999989",
        //         "target_volume" => "3837763191.33800288010388613",
        //         "bid" => "23684.5",
        //         "ask" => "23685",
        //         "high" => "23971.5",
        //         "low" => "23156",
        //         "product_type" => "perpetual",
        //         "open_interest" => "24242.36",
        //         "index_price" => "23686.4",
        //         "index_name" => "BTC-USDT",
        //         "index_currency" => "BTC",
        //         "start_timestamp" => 1631004005882,
        //         "funding_rate" => "0.000187",
        //         "next_funding_rate_timestamp" => 1675065600000,
        //         "contract_type" => "Quanto",
        //         "contract_price" => "23685",
        //         "contract_price_currency" => "USDT"
        //     }
        //
        $marketId = $this->safe_string($contract, 'ticker_id');
        $fundingTimestamp = $this->safe_integer($contract, 'next_funding_rate_timestamp');
        return array(
            'info' => $contract,
            'symbol' => $this->safe_symbol($marketId, $market),
            'markPrice' => null,
            'indexPrice' => $this->safe_number($contract, 'index_price'),
            'interestRate' => null,
            'estimatedSettlePrice' => null,
            'timestamp' => null,
            'datetime' => null,
            'fundingRate' => $this->safe_number($contract, 'funding_rate'),
            'fundingTimestamp' => $fundingTimestamp,
            'fundingDatetime' => $this->iso8601($fundingTimestamp),
            'nextFundingRate' => null,
            'nextFundingTimestamp' => null,
            'nextFundingDatetime' => null,
            'previousFundingRate' => null,
            'previousFundingTimestamp' => null,
            'previousFundingDatetime' => null,
        );
    }

    public function transfer(string $code, $amount, $fromAccount, $toAccount, $params = array ()) {
        return Async\async(function () use ($code, $amount, $fromAccount, $toAccount, $params) {
            /**
             * transfer $currency internally between wallets on the same account
             * @see https://docs.btcex.com/#asset-transfer
             * @param {string} $code unified $currency $code
             * @param {float} $amount amount to transfer
             * @param {string} $fromAccount account to transfer from
             * @param {string} $toAccount account to transfer to
             * @param {array} $params extra parameters specific to the btcex api endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=transfer-structure transfer structure~
             */
            Async\await($this->sign_in());
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $accountsByType = $this->safe_value($this->options, 'accountsByType', array());
            $fromId = $this->safe_string($accountsByType, $fromAccount, $fromAccount);
            $toId = $this->safe_string($accountsByType, $toAccount, $toAccount);
            $request = array(
                'coin_type' => $currency['id'],
                'amount' => $this->currency_to_precision($code, $amount),
                'from' => $fromId, // WALLET, SPOT, PERPETUAL
                'to' => $toId, // WALLET, SPOT, PERPETUAL
            );
            $response = Async\await($this->privatePostSubmitTransfer (array_merge($request, $params)));
            //
            //     {
            //         "id" => "1674937273",
            //         "jsonrpc" => "2.0",
            //         "usIn" => 1674937274762,
            //         "usOut" => 1674937274774,
            //         "usDiff" => 12,
            //         "result" => "ok"
            //     }
            //
            return $this->parse_transfer($response, $currency);
        }) ();
    }

    public function parse_transfer($transfer, $currency = null) {
        //
        //     {
        //         "id" => "1674937273",
        //         "jsonrpc" => "2.0",
        //         "usIn" => 1674937274762,
        //         "usOut" => 1674937274774,
        //         "usDiff" => 12,
        //         "result" => "ok"
        //     }
        //
        return array(
            'info' => $transfer,
            'id' => $this->safe_string($transfer, 'id'),
            'timestamp' => null,
            'datetime' => null,
            'currency' => null,
            'amount' => null,
            'fromAccount' => null,
            'toAccount' => null,
            'status' => null,
        );
    }

    public function fetch_open_interest(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the open interest of a $market
             * @see https://docs.btcex.com/#contracts
             * @param {string} $symbol unified CCXT $market $symbol
             * @param {array} $params extra parameters specific to the btcex api endpoint
             * @return {array} an open interest structurearray(@link https://docs.ccxt.com/#/?id=interest-history-structure)
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if (!$market['contract']) {
                throw new BadRequest($this->id . ' fetchOpenInterest() supports contract markets only');
            }
            $response = Async\await($this->publicGetCoinGeckoContracts ($params));
            //
            //     {
            //         "jsonrpc" => "2.0",
            //         "usIn" => 1674803585896,
            //         "usOut" => 1674803585943,
            //         "usDiff" => 47,
            //         "result" => array(
            //             array(
            //                 "ticker_id" => "BTC-USDT-PERPETUAL",
            //                 "base_currency" => "BTC",
            //                 "target_currency" => "USDT",
            //                 "last_price" => "23685",
            //                 "base_volume" => "167011.37199999999999989",
            //                 "target_volume" => "3837763191.33800288010388613",
            //                 "bid" => "23684.5",
            //                 "ask" => "23685",
            //                 "high" => "23971.5",
            //                 "low" => "23156",
            //                 "product_type" => "perpetual",
            //                 "open_interest" => "24242.36",
            //                 "index_price" => "23686.4",
            //                 "index_name" => "BTC-USDT",
            //                 "index_currency" => "BTC",
            //                 "start_timestamp" => 1631004005882,
            //                 "funding_rate" => "0.000187",
            //                 "next_funding_rate_timestamp" => 1675065600000,
            //                 "contract_type" => "Quanto",
            //                 "contract_price" => "23685",
            //                 "contract_price_currency" => "USDT"
            //             ),
            //         )
            //     }
            //
            $data = $this->safe_value($response, 'result', array());
            for ($i = 0; $i < count($data); $i++) {
                $entry = $data[$i];
                $marketId = $this->safe_string($entry, 'ticker_id');
                if ($marketId === $market['id']) {
                    return $this->parse_open_interest($entry, $market);
                }
            }
            return $this->parse_open_interest($data, $market);
        }) ();
    }

    public function parse_open_interest($interest, $market = null) {
        //
        //     {
        //         "ticker_id" => "BTC-USDT-PERPETUAL",
        //         "base_currency" => "BTC",
        //         "target_currency" => "USDT",
        //         "last_price" => "23685",
        //         "base_volume" => "167011.37199999999999989",
        //         "target_volume" => "3837763191.33800288010388613",
        //         "bid" => "23684.5",
        //         "ask" => "23685",
        //         "high" => "23971.5",
        //         "low" => "23156",
        //         "product_type" => "perpetual",
        //         "open_interest" => "24242.36",
        //         "index_price" => "23686.4",
        //         "index_name" => "BTC-USDT",
        //         "index_currency" => "BTC",
        //         "start_timestamp" => 1631004005882,
        //         "funding_rate" => "0.000187",
        //         "next_funding_rate_timestamp" => 1675065600000,
        //         "contract_type" => "Quanto",
        //         "contract_price" => "23685",
        //         "contract_price_currency" => "USDT"
        //     }
        //
        $marketId = $this->safe_string($interest, 'ticker_id');
        $market = $this->safe_market($marketId, $market);
        $openInterest = $this->safe_number($interest, 'open_interest');
        return array(
            'info' => $interest,
            'symbol' => $market['symbol'],
            'baseVolume' => $openInterest,
            'quoteVolume' => null,
            'openInterestAmount' => $openInterest, // in base currency
            'openInterestValue' => null,
            'timestamp' => null,
            'datetime' => null,
        );
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $request = '/' . 'api/' . $this->version . '/' . $api . '/' . $path;
        if ($api === 'public') {
            if ($params) {
                $request .= '?' . $this->urlencode($params);
            }
        }
        if ($api === 'private') {
            $this->check_required_credentials();
            if ($method === 'GET') {
                if ($params) {
                    $request .= '?' . $this->urlencode($params);
                }
            }
            $sessionToken = $this->safe_string($this->options, 'accessToken');
            if ($sessionToken === null) {
                throw new AuthenticationError($this->id . ' sign() requires access token');
            }
            $headers = array(
                'Authorization' => 'bearer ' . $sessionToken,
            );
            if ($method === 'POST') {
                $headers['Content-Type'] = 'application/json';
                if ($params) {
                    $rpcPayload = array(
                        'jsonrpc' => '2.0',
                        'id' => $this->nonce(),
                        'method' => '/' . $api . '/' . $path,
                        'params' => $params,
                    );
                    $body = $this->json($rpcPayload);
                }
            }
        }
        $url = $this->urls['api']['rest'] . $request;
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return; // fallback to the default $error handler
        }
        $error = $this->safe_value($response, 'error');
        if ($error) {
            $feedback = $this->id . ' ' . $body;
            $code = $this->safe_string($error, 'code');
            $message = $this->safe_string($error, 'message');
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $code, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback); // unknown $message
        }
    }
}
