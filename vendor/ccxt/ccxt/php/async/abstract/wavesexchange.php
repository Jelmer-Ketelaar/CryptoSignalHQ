<?php

namespace ccxt\async\abstract;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


use ccxt\async\Exchange;

abstract class wavesexchange extends Exchange {
    public function matcher_get_matcher($params = array()) {
        return $this->request('matcher', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_settings($params = array()) {
        return $this->request('matcher/settings', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_settings_rates($params = array()) {
        return $this->request('matcher/settings/rates', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_balance_reserved_publickey($params = array()) {
        return $this->request('matcher/balance/reserved/{publicKey}', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_debug_allsnashotoffsets($params = array()) {
        return $this->request('matcher/debug/allSnashotOffsets', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_debug_currentoffset($params = array()) {
        return $this->request('matcher/debug/currentOffset', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_debug_lastoffset($params = array()) {
        return $this->request('matcher/debug/lastOffset', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_debug_oldestsnapshotoffset($params = array()) {
        return $this->request('matcher/debug/oldestSnapshotOffset', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_orderbook($params = array()) {
        return $this->request('matcher/orderbook', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_orderbook_amountasset_priceasset($params = array()) {
        return $this->request('matcher/orderbook/{amountAsset}/{priceAsset}', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_orderbook_baseid_quoteid_publickey_publickey($params = array()) {
        return $this->request('matcher/orderbook/{baseId}/{quoteId}/publicKey/{publicKey}', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_orderbook_baseid_quoteid_orderid($params = array()) {
        return $this->request('matcher/orderbook/{baseId}/{quoteId}/{orderId}', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_orderbook_baseid_quoteid_info($params = array()) {
        return $this->request('matcher/orderbook/{baseId}/{quoteId}/info', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_orderbook_baseid_quoteid_status($params = array()) {
        return $this->request('matcher/orderbook/{baseId}/{quoteId}/status', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_orderbook_baseid_quoteid_tradeablebalance_address($params = array()) {
        return $this->request('matcher/orderbook/{baseId}/{quoteId}/tradeableBalance/{address}', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_orderbook_publickey($params = array()) {
        return $this->request('matcher/orderbook/{publicKey}', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_orderbook_publickey_orderid($params = array()) {
        return $this->request('matcher/orderbook/{publicKey}/{orderId}', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_orders_address($params = array()) {
        return $this->request('matcher/orders/{address}', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_orders_address_orderid($params = array()) {
        return $this->request('matcher/orders/{address}/{orderId}', 'matcher', 'GET', $params);
    }
    public function matcher_get_matcher_transactions_orderid($params = array()) {
        return $this->request('matcher/transactions/{orderId}', 'matcher', 'GET', $params);
    }
    public function matcher_post_matcher_orderbook($params = array()) {
        return $this->request('matcher/orderbook', 'matcher', 'POST', $params);
    }
    public function matcher_post_matcher_orderbook_market($params = array()) {
        return $this->request('matcher/orderbook/market', 'matcher', 'POST', $params);
    }
    public function matcher_post_matcher_orderbook_cancel($params = array()) {
        return $this->request('matcher/orderbook/cancel', 'matcher', 'POST', $params);
    }
    public function matcher_post_matcher_orderbook_baseid_quoteid_cancel($params = array()) {
        return $this->request('matcher/orderbook/{baseId}/{quoteId}/cancel', 'matcher', 'POST', $params);
    }
    public function matcher_post_matcher_orderbook_amountasset_priceasset_calculatefee($params = array()) {
        return $this->request('matcher/orderbook/{amountAsset}/{priceAsset}/calculateFee', 'matcher', 'POST', $params);
    }
    public function matcher_post_matcher_debug_savesnapshots($params = array()) {
        return $this->request('matcher/debug/saveSnapshots', 'matcher', 'POST', $params);
    }
    public function matcher_post_matcher_orders_address_cancel($params = array()) {
        return $this->request('matcher/orders/{address}/cancel', 'matcher', 'POST', $params);
    }
    public function matcher_post_matcher_orders_cancel_orderid($params = array()) {
        return $this->request('matcher/orders/cancel/{orderId}', 'matcher', 'POST', $params);
    }
    public function matcher_delete_matcher_orderbook_baseid_quoteid($params = array()) {
        return $this->request('matcher/orderbook/{baseId}/{quoteId}', 'matcher', 'DELETE', $params);
    }
    public function matcher_delete_matcher_settings_rates_assetid($params = array()) {
        return $this->request('matcher/settings/rates/{assetId}', 'matcher', 'DELETE', $params);
    }
    public function matcher_put_matcher_settings_rates_assetid($params = array()) {
        return $this->request('matcher/settings/rates/{assetId}', 'matcher', 'PUT', $params);
    }
    public function node_get_addresses($params = array()) {
        return $this->request('addresses', 'node', 'GET', $params);
    }
    public function node_get_addresses_balance_address($params = array()) {
        return $this->request('addresses/balance/{address}', 'node', 'GET', $params);
    }
    public function node_get_addresses_balance_address_confirmations($params = array()) {
        return $this->request('addresses/balance/{address}/{confirmations}', 'node', 'GET', $params);
    }
    public function node_get_addresses_balance_details_address($params = array()) {
        return $this->request('addresses/balance/details/{address}', 'node', 'GET', $params);
    }
    public function node_get_addresses_data_address($params = array()) {
        return $this->request('addresses/data/{address}', 'node', 'GET', $params);
    }
    public function node_get_addresses_data_address_key($params = array()) {
        return $this->request('addresses/data/{address}/{key}', 'node', 'GET', $params);
    }
    public function node_get_addresses_effectivebalance_address($params = array()) {
        return $this->request('addresses/effectiveBalance/{address}', 'node', 'GET', $params);
    }
    public function node_get_addresses_effectivebalance_address_confirmations($params = array()) {
        return $this->request('addresses/effectiveBalance/{address}/{confirmations}', 'node', 'GET', $params);
    }
    public function node_get_addresses_publickey_publickey($params = array()) {
        return $this->request('addresses/publicKey/{publicKey}', 'node', 'GET', $params);
    }
    public function node_get_addresses_scriptinfo_address($params = array()) {
        return $this->request('addresses/scriptInfo/{address}', 'node', 'GET', $params);
    }
    public function node_get_addresses_scriptinfo_address_meta($params = array()) {
        return $this->request('addresses/scriptInfo/{address}/meta', 'node', 'GET', $params);
    }
    public function node_get_addresses_seed_address($params = array()) {
        return $this->request('addresses/seed/{address}', 'node', 'GET', $params);
    }
    public function node_get_addresses_seq_from_to($params = array()) {
        return $this->request('addresses/seq/{from}/{to}', 'node', 'GET', $params);
    }
    public function node_get_addresses_validate_address($params = array()) {
        return $this->request('addresses/validate/{address}', 'node', 'GET', $params);
    }
    public function node_get_alias_by_address_address($params = array()) {
        return $this->request('alias/by-address/{address}', 'node', 'GET', $params);
    }
    public function node_get_alias_by_alias_alias($params = array()) {
        return $this->request('alias/by-alias/{alias}', 'node', 'GET', $params);
    }
    public function node_get_assets_assetid_distribution_height_limit($params = array()) {
        return $this->request('assets/{assetId}/distribution/{height}/{limit}', 'node', 'GET', $params);
    }
    public function node_get_assets_balance_address($params = array()) {
        return $this->request('assets/balance/{address}', 'node', 'GET', $params);
    }
    public function node_get_assets_balance_address_assetid($params = array()) {
        return $this->request('assets/balance/{address}/{assetId}', 'node', 'GET', $params);
    }
    public function node_get_assets_details_assetid($params = array()) {
        return $this->request('assets/details/{assetId}', 'node', 'GET', $params);
    }
    public function node_get_assets_nft_address_limit_limit($params = array()) {
        return $this->request('assets/nft/{address}/limit/{limit}', 'node', 'GET', $params);
    }
    public function node_get_blockchain_rewards($params = array()) {
        return $this->request('blockchain/rewards', 'node', 'GET', $params);
    }
    public function node_get_blockchain_rewards_height($params = array()) {
        return $this->request('blockchain/rewards/height', 'node', 'GET', $params);
    }
    public function node_get_blocks_address_address_from_to($params = array()) {
        return $this->request('blocks/address/{address}/{from}/{to}/', 'node', 'GET', $params);
    }
    public function node_get_blocks_at_height($params = array()) {
        return $this->request('blocks/at/{height}', 'node', 'GET', $params);
    }
    public function node_get_blocks_delay_signature_blocknum($params = array()) {
        return $this->request('blocks/delay/{signature}/{blockNum}', 'node', 'GET', $params);
    }
    public function node_get_blocks_first($params = array()) {
        return $this->request('blocks/first', 'node', 'GET', $params);
    }
    public function node_get_blocks_headers_last($params = array()) {
        return $this->request('blocks/headers/last', 'node', 'GET', $params);
    }
    public function node_get_blocks_headers_seq_from_to($params = array()) {
        return $this->request('blocks/headers/seq/{from}/{to}', 'node', 'GET', $params);
    }
    public function node_get_blocks_height($params = array()) {
        return $this->request('blocks/height', 'node', 'GET', $params);
    }
    public function node_get_blocks_height_signature($params = array()) {
        return $this->request('blocks/height/{signature}', 'node', 'GET', $params);
    }
    public function node_get_blocks_last($params = array()) {
        return $this->request('blocks/last', 'node', 'GET', $params);
    }
    public function node_get_blocks_seq_from_to($params = array()) {
        return $this->request('blocks/seq/{from}/{to}', 'node', 'GET', $params);
    }
    public function node_get_blocks_signature_signature($params = array()) {
        return $this->request('blocks/signature/{signature}', 'node', 'GET', $params);
    }
    public function node_get_consensus_algo($params = array()) {
        return $this->request('consensus/algo', 'node', 'GET', $params);
    }
    public function node_get_consensus_basetarget($params = array()) {
        return $this->request('consensus/basetarget', 'node', 'GET', $params);
    }
    public function node_get_consensus_basetarget_blockid($params = array()) {
        return $this->request('consensus/basetarget/{blockId}', 'node', 'GET', $params);
    }
    public function node_get_consensus_generatingbalance_address($params = array()) {
        return $this->request('consensus/{generatingbalance}/address', 'node', 'GET', $params);
    }
    public function node_get_consensus_generationsignature($params = array()) {
        return $this->request('consensus/generationsignature', 'node', 'GET', $params);
    }
    public function node_get_consensus_generationsignature_blockid($params = array()) {
        return $this->request('consensus/generationsignature/{blockId}', 'node', 'GET', $params);
    }
    public function node_get_debug_balances_history_address($params = array()) {
        return $this->request('debug/balances/history/{address}', 'node', 'GET', $params);
    }
    public function node_get_debug_blocks_howmany($params = array()) {
        return $this->request('debug/blocks/{howMany}', 'node', 'GET', $params);
    }
    public function node_get_debug_configinfo($params = array()) {
        return $this->request('debug/configInfo', 'node', 'GET', $params);
    }
    public function node_get_debug_historyinfo($params = array()) {
        return $this->request('debug/historyInfo', 'node', 'GET', $params);
    }
    public function node_get_debug_info($params = array()) {
        return $this->request('debug/info', 'node', 'GET', $params);
    }
    public function node_get_debug_minerinfo($params = array()) {
        return $this->request('debug/minerInfo', 'node', 'GET', $params);
    }
    public function node_get_debug_portfolios_address($params = array()) {
        return $this->request('debug/portfolios/{address}', 'node', 'GET', $params);
    }
    public function node_get_debug_state($params = array()) {
        return $this->request('debug/state', 'node', 'GET', $params);
    }
    public function node_get_debug_statechanges_address_address($params = array()) {
        return $this->request('debug/stateChanges/address/{address}', 'node', 'GET', $params);
    }
    public function node_get_debug_statechanges_info_id($params = array()) {
        return $this->request('debug/stateChanges/info/{id}', 'node', 'GET', $params);
    }
    public function node_get_debug_statewaves_height($params = array()) {
        return $this->request('debug/stateWaves/{height}', 'node', 'GET', $params);
    }
    public function node_get_leasing_active_address($params = array()) {
        return $this->request('leasing/active/{address}', 'node', 'GET', $params);
    }
    public function node_get_node_state($params = array()) {
        return $this->request('node/state', 'node', 'GET', $params);
    }
    public function node_get_node_version($params = array()) {
        return $this->request('node/version', 'node', 'GET', $params);
    }
    public function node_get_peers_all($params = array()) {
        return $this->request('peers/all', 'node', 'GET', $params);
    }
    public function node_get_peers_blacklisted($params = array()) {
        return $this->request('peers/blacklisted', 'node', 'GET', $params);
    }
    public function node_get_peers_connected($params = array()) {
        return $this->request('peers/connected', 'node', 'GET', $params);
    }
    public function node_get_peers_suspended($params = array()) {
        return $this->request('peers/suspended', 'node', 'GET', $params);
    }
    public function node_get_transactions_address_address_limit_limit($params = array()) {
        return $this->request('transactions/address/{address}/limit/{limit}', 'node', 'GET', $params);
    }
    public function node_get_transactions_info_id($params = array()) {
        return $this->request('transactions/info/{id}', 'node', 'GET', $params);
    }
    public function node_get_transactions_status($params = array()) {
        return $this->request('transactions/status', 'node', 'GET', $params);
    }
    public function node_get_transactions_unconfirmed($params = array()) {
        return $this->request('transactions/unconfirmed', 'node', 'GET', $params);
    }
    public function node_get_transactions_unconfirmed_info_id($params = array()) {
        return $this->request('transactions/unconfirmed/info/{id}', 'node', 'GET', $params);
    }
    public function node_get_transactions_unconfirmed_size($params = array()) {
        return $this->request('transactions/unconfirmed/size', 'node', 'GET', $params);
    }
    public function node_get_utils_seed($params = array()) {
        return $this->request('utils/seed', 'node', 'GET', $params);
    }
    public function node_get_utils_seed_length($params = array()) {
        return $this->request('utils/seed/{length}', 'node', 'GET', $params);
    }
    public function node_get_utils_time($params = array()) {
        return $this->request('utils/time', 'node', 'GET', $params);
    }
    public function node_get_wallet_seed($params = array()) {
        return $this->request('wallet/seed', 'node', 'GET', $params);
    }
    public function node_post_addresses($params = array()) {
        return $this->request('addresses', 'node', 'POST', $params);
    }
    public function node_post_addresses_data_address($params = array()) {
        return $this->request('addresses/data/{address}', 'node', 'POST', $params);
    }
    public function node_post_addresses_sign_address($params = array()) {
        return $this->request('addresses/sign/{address}', 'node', 'POST', $params);
    }
    public function node_post_addresses_signtext_address($params = array()) {
        return $this->request('addresses/signText/{address}', 'node', 'POST', $params);
    }
    public function node_post_addresses_verify_address($params = array()) {
        return $this->request('addresses/verify/{address}', 'node', 'POST', $params);
    }
    public function node_post_addresses_verifytext_address($params = array()) {
        return $this->request('addresses/verifyText/{address}', 'node', 'POST', $params);
    }
    public function node_post_debug_blacklist($params = array()) {
        return $this->request('debug/blacklist', 'node', 'POST', $params);
    }
    public function node_post_debug_print($params = array()) {
        return $this->request('debug/print', 'node', 'POST', $params);
    }
    public function node_post_debug_rollback($params = array()) {
        return $this->request('debug/rollback', 'node', 'POST', $params);
    }
    public function node_post_debug_validate($params = array()) {
        return $this->request('debug/validate', 'node', 'POST', $params);
    }
    public function node_post_node_stop($params = array()) {
        return $this->request('node/stop', 'node', 'POST', $params);
    }
    public function node_post_peers_clearblacklist($params = array()) {
        return $this->request('peers/clearblacklist', 'node', 'POST', $params);
    }
    public function node_post_peers_connect($params = array()) {
        return $this->request('peers/connect', 'node', 'POST', $params);
    }
    public function node_post_transactions_broadcast($params = array()) {
        return $this->request('transactions/broadcast', 'node', 'POST', $params);
    }
    public function node_post_transactions_calculatefee($params = array()) {
        return $this->request('transactions/calculateFee', 'node', 'POST', $params);
    }
    public function node_post_tranasctions_sign($params = array()) {
        return $this->request('tranasctions/sign', 'node', 'POST', $params);
    }
    public function node_post_transactions_sign_signeraddress($params = array()) {
        return $this->request('transactions/sign/{signerAddress}', 'node', 'POST', $params);
    }
    public function node_post_tranasctions_status($params = array()) {
        return $this->request('tranasctions/status', 'node', 'POST', $params);
    }
    public function node_post_utils_hash_fast($params = array()) {
        return $this->request('utils/hash/fast', 'node', 'POST', $params);
    }
    public function node_post_utils_hash_secure($params = array()) {
        return $this->request('utils/hash/secure', 'node', 'POST', $params);
    }
    public function node_post_utils_script_compilecode($params = array()) {
        return $this->request('utils/script/compileCode', 'node', 'POST', $params);
    }
    public function node_post_utils_script_compilewithimports($params = array()) {
        return $this->request('utils/script/compileWithImports', 'node', 'POST', $params);
    }
    public function node_post_utils_script_decompile($params = array()) {
        return $this->request('utils/script/decompile', 'node', 'POST', $params);
    }
    public function node_post_utils_script_estimate($params = array()) {
        return $this->request('utils/script/estimate', 'node', 'POST', $params);
    }
    public function node_post_utils_sign_privatekey($params = array()) {
        return $this->request('utils/sign/{privateKey}', 'node', 'POST', $params);
    }
    public function node_post_utils_transactionsserialize($params = array()) {
        return $this->request('utils/transactionsSerialize', 'node', 'POST', $params);
    }
    public function node_delete_addresses_address($params = array()) {
        return $this->request('addresses/{address}', 'node', 'DELETE', $params);
    }
    public function node_delete_debug_rollback_to_signature($params = array()) {
        return $this->request('debug/rollback-to/{signature}', 'node', 'DELETE', $params);
    }
    public function public_get_assets($params = array()) {
        return $this->request('assets', 'public', 'GET', $params);
    }
    public function public_get_pairs($params = array()) {
        return $this->request('pairs', 'public', 'GET', $params);
    }
    public function public_get_candles_baseid_quoteid($params = array()) {
        return $this->request('candles/{baseId}/{quoteId}', 'public', 'GET', $params);
    }
    public function public_get_transactions_exchange($params = array()) {
        return $this->request('transactions/exchange', 'public', 'GET', $params);
    }
    public function private_get_deposit_addresses_currency($params = array()) {
        return $this->request('deposit/addresses/{currency}', 'private', 'GET', $params);
    }
    public function private_get_deposit_addresses_currency_platform($params = array()) {
        return $this->request('deposit/addresses/{currency}/{platform}', 'private', 'GET', $params);
    }
    public function private_get_platforms($params = array()) {
        return $this->request('platforms', 'private', 'GET', $params);
    }
    public function private_get_deposit_currencies($params = array()) {
        return $this->request('deposit/currencies', 'private', 'GET', $params);
    }
    public function private_get_withdraw_currencies($params = array()) {
        return $this->request('withdraw/currencies', 'private', 'GET', $params);
    }
    public function private_get_withdraw_addresses_currency_address($params = array()) {
        return $this->request('withdraw/addresses/{currency}/{address}', 'private', 'GET', $params);
    }
    public function private_post_oauth2_token($params = array()) {
        return $this->request('oauth2/token', 'private', 'POST', $params);
    }
    public function forward_get_matcher_orders_address($params = array()) {
        return $this->request('matcher/orders/{address}', 'forward', 'GET', $params);
    }
    public function forward_get_matcher_orders_address_orderid($params = array()) {
        return $this->request('matcher/orders/{address}/{orderId}', 'forward', 'GET', $params);
    }
    public function forward_post_matcher_orders_wavesaddress_cancel($params = array()) {
        return $this->request('matcher/orders/{wavesAddress}/cancel', 'forward', 'POST', $params);
    }
    public function market_get_tickers($params = array()) {
        return $this->request('tickers', 'market', 'GET', $params);
    }
    public function matcherGetMatcher($params = array()) {
        return $this->request('matcher', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherSettings($params = array()) {
        return $this->request('matcher/settings', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherSettingsRates($params = array()) {
        return $this->request('matcher/settings/rates', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherBalanceReservedPublicKey($params = array()) {
        return $this->request('matcher/balance/reserved/{publicKey}', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherDebugAllSnashotOffsets($params = array()) {
        return $this->request('matcher/debug/allSnashotOffsets', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherDebugCurrentOffset($params = array()) {
        return $this->request('matcher/debug/currentOffset', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherDebugLastOffset($params = array()) {
        return $this->request('matcher/debug/lastOffset', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherDebugOldestSnapshotOffset($params = array()) {
        return $this->request('matcher/debug/oldestSnapshotOffset', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherOrderbook($params = array()) {
        return $this->request('matcher/orderbook', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherOrderbookAmountAssetPriceAsset($params = array()) {
        return $this->request('matcher/orderbook/{amountAsset}/{priceAsset}', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherOrderbookBaseIdQuoteIdPublicKeyPublicKey($params = array()) {
        return $this->request('matcher/orderbook/{baseId}/{quoteId}/publicKey/{publicKey}', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherOrderbookBaseIdQuoteIdOrderId($params = array()) {
        return $this->request('matcher/orderbook/{baseId}/{quoteId}/{orderId}', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherOrderbookBaseIdQuoteIdInfo($params = array()) {
        return $this->request('matcher/orderbook/{baseId}/{quoteId}/info', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherOrderbookBaseIdQuoteIdStatus($params = array()) {
        return $this->request('matcher/orderbook/{baseId}/{quoteId}/status', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherOrderbookBaseIdQuoteIdTradeableBalanceAddress($params = array()) {
        return $this->request('matcher/orderbook/{baseId}/{quoteId}/tradeableBalance/{address}', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherOrderbookPublicKey($params = array()) {
        return $this->request('matcher/orderbook/{publicKey}', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherOrderbookPublicKeyOrderId($params = array()) {
        return $this->request('matcher/orderbook/{publicKey}/{orderId}', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherOrdersAddress($params = array()) {
        return $this->request('matcher/orders/{address}', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherOrdersAddressOrderId($params = array()) {
        return $this->request('matcher/orders/{address}/{orderId}', 'matcher', 'GET', $params);
    }
    public function matcherGetMatcherTransactionsOrderId($params = array()) {
        return $this->request('matcher/transactions/{orderId}', 'matcher', 'GET', $params);
    }
    public function matcherPostMatcherOrderbook($params = array()) {
        return $this->request('matcher/orderbook', 'matcher', 'POST', $params);
    }
    public function matcherPostMatcherOrderbookMarket($params = array()) {
        return $this->request('matcher/orderbook/market', 'matcher', 'POST', $params);
    }
    public function matcherPostMatcherOrderbookCancel($params = array()) {
        return $this->request('matcher/orderbook/cancel', 'matcher', 'POST', $params);
    }
    public function matcherPostMatcherOrderbookBaseIdQuoteIdCancel($params = array()) {
        return $this->request('matcher/orderbook/{baseId}/{quoteId}/cancel', 'matcher', 'POST', $params);
    }
    public function matcherPostMatcherOrderbookAmountAssetPriceAssetCalculateFee($params = array()) {
        return $this->request('matcher/orderbook/{amountAsset}/{priceAsset}/calculateFee', 'matcher', 'POST', $params);
    }
    public function matcherPostMatcherDebugSaveSnapshots($params = array()) {
        return $this->request('matcher/debug/saveSnapshots', 'matcher', 'POST', $params);
    }
    public function matcherPostMatcherOrdersAddressCancel($params = array()) {
        return $this->request('matcher/orders/{address}/cancel', 'matcher', 'POST', $params);
    }
    public function matcherPostMatcherOrdersCancelOrderId($params = array()) {
        return $this->request('matcher/orders/cancel/{orderId}', 'matcher', 'POST', $params);
    }
    public function matcherDeleteMatcherOrderbookBaseIdQuoteId($params = array()) {
        return $this->request('matcher/orderbook/{baseId}/{quoteId}', 'matcher', 'DELETE', $params);
    }
    public function matcherDeleteMatcherSettingsRatesAssetId($params = array()) {
        return $this->request('matcher/settings/rates/{assetId}', 'matcher', 'DELETE', $params);
    }
    public function matcherPutMatcherSettingsRatesAssetId($params = array()) {
        return $this->request('matcher/settings/rates/{assetId}', 'matcher', 'PUT', $params);
    }
    public function nodeGetAddresses($params = array()) {
        return $this->request('addresses', 'node', 'GET', $params);
    }
    public function nodeGetAddressesBalanceAddress($params = array()) {
        return $this->request('addresses/balance/{address}', 'node', 'GET', $params);
    }
    public function nodeGetAddressesBalanceAddressConfirmations($params = array()) {
        return $this->request('addresses/balance/{address}/{confirmations}', 'node', 'GET', $params);
    }
    public function nodeGetAddressesBalanceDetailsAddress($params = array()) {
        return $this->request('addresses/balance/details/{address}', 'node', 'GET', $params);
    }
    public function nodeGetAddressesDataAddress($params = array()) {
        return $this->request('addresses/data/{address}', 'node', 'GET', $params);
    }
    public function nodeGetAddressesDataAddressKey($params = array()) {
        return $this->request('addresses/data/{address}/{key}', 'node', 'GET', $params);
    }
    public function nodeGetAddressesEffectiveBalanceAddress($params = array()) {
        return $this->request('addresses/effectiveBalance/{address}', 'node', 'GET', $params);
    }
    public function nodeGetAddressesEffectiveBalanceAddressConfirmations($params = array()) {
        return $this->request('addresses/effectiveBalance/{address}/{confirmations}', 'node', 'GET', $params);
    }
    public function nodeGetAddressesPublicKeyPublicKey($params = array()) {
        return $this->request('addresses/publicKey/{publicKey}', 'node', 'GET', $params);
    }
    public function nodeGetAddressesScriptInfoAddress($params = array()) {
        return $this->request('addresses/scriptInfo/{address}', 'node', 'GET', $params);
    }
    public function nodeGetAddressesScriptInfoAddressMeta($params = array()) {
        return $this->request('addresses/scriptInfo/{address}/meta', 'node', 'GET', $params);
    }
    public function nodeGetAddressesSeedAddress($params = array()) {
        return $this->request('addresses/seed/{address}', 'node', 'GET', $params);
    }
    public function nodeGetAddressesSeqFromTo($params = array()) {
        return $this->request('addresses/seq/{from}/{to}', 'node', 'GET', $params);
    }
    public function nodeGetAddressesValidateAddress($params = array()) {
        return $this->request('addresses/validate/{address}', 'node', 'GET', $params);
    }
    public function nodeGetAliasByAddressAddress($params = array()) {
        return $this->request('alias/by-address/{address}', 'node', 'GET', $params);
    }
    public function nodeGetAliasByAliasAlias($params = array()) {
        return $this->request('alias/by-alias/{alias}', 'node', 'GET', $params);
    }
    public function nodeGetAssetsAssetIdDistributionHeightLimit($params = array()) {
        return $this->request('assets/{assetId}/distribution/{height}/{limit}', 'node', 'GET', $params);
    }
    public function nodeGetAssetsBalanceAddress($params = array()) {
        return $this->request('assets/balance/{address}', 'node', 'GET', $params);
    }
    public function nodeGetAssetsBalanceAddressAssetId($params = array()) {
        return $this->request('assets/balance/{address}/{assetId}', 'node', 'GET', $params);
    }
    public function nodeGetAssetsDetailsAssetId($params = array()) {
        return $this->request('assets/details/{assetId}', 'node', 'GET', $params);
    }
    public function nodeGetAssetsNftAddressLimitLimit($params = array()) {
        return $this->request('assets/nft/{address}/limit/{limit}', 'node', 'GET', $params);
    }
    public function nodeGetBlockchainRewards($params = array()) {
        return $this->request('blockchain/rewards', 'node', 'GET', $params);
    }
    public function nodeGetBlockchainRewardsHeight($params = array()) {
        return $this->request('blockchain/rewards/height', 'node', 'GET', $params);
    }
    public function nodeGetBlocksAddressAddressFromTo($params = array()) {
        return $this->request('blocks/address/{address}/{from}/{to}/', 'node', 'GET', $params);
    }
    public function nodeGetBlocksAtHeight($params = array()) {
        return $this->request('blocks/at/{height}', 'node', 'GET', $params);
    }
    public function nodeGetBlocksDelaySignatureBlockNum($params = array()) {
        return $this->request('blocks/delay/{signature}/{blockNum}', 'node', 'GET', $params);
    }
    public function nodeGetBlocksFirst($params = array()) {
        return $this->request('blocks/first', 'node', 'GET', $params);
    }
    public function nodeGetBlocksHeadersLast($params = array()) {
        return $this->request('blocks/headers/last', 'node', 'GET', $params);
    }
    public function nodeGetBlocksHeadersSeqFromTo($params = array()) {
        return $this->request('blocks/headers/seq/{from}/{to}', 'node', 'GET', $params);
    }
    public function nodeGetBlocksHeight($params = array()) {
        return $this->request('blocks/height', 'node', 'GET', $params);
    }
    public function nodeGetBlocksHeightSignature($params = array()) {
        return $this->request('blocks/height/{signature}', 'node', 'GET', $params);
    }
    public function nodeGetBlocksLast($params = array()) {
        return $this->request('blocks/last', 'node', 'GET', $params);
    }
    public function nodeGetBlocksSeqFromTo($params = array()) {
        return $this->request('blocks/seq/{from}/{to}', 'node', 'GET', $params);
    }
    public function nodeGetBlocksSignatureSignature($params = array()) {
        return $this->request('blocks/signature/{signature}', 'node', 'GET', $params);
    }
    public function nodeGetConsensusAlgo($params = array()) {
        return $this->request('consensus/algo', 'node', 'GET', $params);
    }
    public function nodeGetConsensusBasetarget($params = array()) {
        return $this->request('consensus/basetarget', 'node', 'GET', $params);
    }
    public function nodeGetConsensusBasetargetBlockId($params = array()) {
        return $this->request('consensus/basetarget/{blockId}', 'node', 'GET', $params);
    }
    public function nodeGetConsensusGeneratingbalanceAddress($params = array()) {
        return $this->request('consensus/{generatingbalance}/address', 'node', 'GET', $params);
    }
    public function nodeGetConsensusGenerationsignature($params = array()) {
        return $this->request('consensus/generationsignature', 'node', 'GET', $params);
    }
    public function nodeGetConsensusGenerationsignatureBlockId($params = array()) {
        return $this->request('consensus/generationsignature/{blockId}', 'node', 'GET', $params);
    }
    public function nodeGetDebugBalancesHistoryAddress($params = array()) {
        return $this->request('debug/balances/history/{address}', 'node', 'GET', $params);
    }
    public function nodeGetDebugBlocksHowMany($params = array()) {
        return $this->request('debug/blocks/{howMany}', 'node', 'GET', $params);
    }
    public function nodeGetDebugConfigInfo($params = array()) {
        return $this->request('debug/configInfo', 'node', 'GET', $params);
    }
    public function nodeGetDebugHistoryInfo($params = array()) {
        return $this->request('debug/historyInfo', 'node', 'GET', $params);
    }
    public function nodeGetDebugInfo($params = array()) {
        return $this->request('debug/info', 'node', 'GET', $params);
    }
    public function nodeGetDebugMinerInfo($params = array()) {
        return $this->request('debug/minerInfo', 'node', 'GET', $params);
    }
    public function nodeGetDebugPortfoliosAddress($params = array()) {
        return $this->request('debug/portfolios/{address}', 'node', 'GET', $params);
    }
    public function nodeGetDebugState($params = array()) {
        return $this->request('debug/state', 'node', 'GET', $params);
    }
    public function nodeGetDebugStateChangesAddressAddress($params = array()) {
        return $this->request('debug/stateChanges/address/{address}', 'node', 'GET', $params);
    }
    public function nodeGetDebugStateChangesInfoId($params = array()) {
        return $this->request('debug/stateChanges/info/{id}', 'node', 'GET', $params);
    }
    public function nodeGetDebugStateWavesHeight($params = array()) {
        return $this->request('debug/stateWaves/{height}', 'node', 'GET', $params);
    }
    public function nodeGetLeasingActiveAddress($params = array()) {
        return $this->request('leasing/active/{address}', 'node', 'GET', $params);
    }
    public function nodeGetNodeState($params = array()) {
        return $this->request('node/state', 'node', 'GET', $params);
    }
    public function nodeGetNodeVersion($params = array()) {
        return $this->request('node/version', 'node', 'GET', $params);
    }
    public function nodeGetPeersAll($params = array()) {
        return $this->request('peers/all', 'node', 'GET', $params);
    }
    public function nodeGetPeersBlacklisted($params = array()) {
        return $this->request('peers/blacklisted', 'node', 'GET', $params);
    }
    public function nodeGetPeersConnected($params = array()) {
        return $this->request('peers/connected', 'node', 'GET', $params);
    }
    public function nodeGetPeersSuspended($params = array()) {
        return $this->request('peers/suspended', 'node', 'GET', $params);
    }
    public function nodeGetTransactionsAddressAddressLimitLimit($params = array()) {
        return $this->request('transactions/address/{address}/limit/{limit}', 'node', 'GET', $params);
    }
    public function nodeGetTransactionsInfoId($params = array()) {
        return $this->request('transactions/info/{id}', 'node', 'GET', $params);
    }
    public function nodeGetTransactionsStatus($params = array()) {
        return $this->request('transactions/status', 'node', 'GET', $params);
    }
    public function nodeGetTransactionsUnconfirmed($params = array()) {
        return $this->request('transactions/unconfirmed', 'node', 'GET', $params);
    }
    public function nodeGetTransactionsUnconfirmedInfoId($params = array()) {
        return $this->request('transactions/unconfirmed/info/{id}', 'node', 'GET', $params);
    }
    public function nodeGetTransactionsUnconfirmedSize($params = array()) {
        return $this->request('transactions/unconfirmed/size', 'node', 'GET', $params);
    }
    public function nodeGetUtilsSeed($params = array()) {
        return $this->request('utils/seed', 'node', 'GET', $params);
    }
    public function nodeGetUtilsSeedLength($params = array()) {
        return $this->request('utils/seed/{length}', 'node', 'GET', $params);
    }
    public function nodeGetUtilsTime($params = array()) {
        return $this->request('utils/time', 'node', 'GET', $params);
    }
    public function nodeGetWalletSeed($params = array()) {
        return $this->request('wallet/seed', 'node', 'GET', $params);
    }
    public function nodePostAddresses($params = array()) {
        return $this->request('addresses', 'node', 'POST', $params);
    }
    public function nodePostAddressesDataAddress($params = array()) {
        return $this->request('addresses/data/{address}', 'node', 'POST', $params);
    }
    public function nodePostAddressesSignAddress($params = array()) {
        return $this->request('addresses/sign/{address}', 'node', 'POST', $params);
    }
    public function nodePostAddressesSignTextAddress($params = array()) {
        return $this->request('addresses/signText/{address}', 'node', 'POST', $params);
    }
    public function nodePostAddressesVerifyAddress($params = array()) {
        return $this->request('addresses/verify/{address}', 'node', 'POST', $params);
    }
    public function nodePostAddressesVerifyTextAddress($params = array()) {
        return $this->request('addresses/verifyText/{address}', 'node', 'POST', $params);
    }
    public function nodePostDebugBlacklist($params = array()) {
        return $this->request('debug/blacklist', 'node', 'POST', $params);
    }
    public function nodePostDebugPrint($params = array()) {
        return $this->request('debug/print', 'node', 'POST', $params);
    }
    public function nodePostDebugRollback($params = array()) {
        return $this->request('debug/rollback', 'node', 'POST', $params);
    }
    public function nodePostDebugValidate($params = array()) {
        return $this->request('debug/validate', 'node', 'POST', $params);
    }
    public function nodePostNodeStop($params = array()) {
        return $this->request('node/stop', 'node', 'POST', $params);
    }
    public function nodePostPeersClearblacklist($params = array()) {
        return $this->request('peers/clearblacklist', 'node', 'POST', $params);
    }
    public function nodePostPeersConnect($params = array()) {
        return $this->request('peers/connect', 'node', 'POST', $params);
    }
    public function nodePostTransactionsBroadcast($params = array()) {
        return $this->request('transactions/broadcast', 'node', 'POST', $params);
    }
    public function nodePostTransactionsCalculateFee($params = array()) {
        return $this->request('transactions/calculateFee', 'node', 'POST', $params);
    }
    public function nodePostTranasctionsSign($params = array()) {
        return $this->request('tranasctions/sign', 'node', 'POST', $params);
    }
    public function nodePostTransactionsSignSignerAddress($params = array()) {
        return $this->request('transactions/sign/{signerAddress}', 'node', 'POST', $params);
    }
    public function nodePostTranasctionsStatus($params = array()) {
        return $this->request('tranasctions/status', 'node', 'POST', $params);
    }
    public function nodePostUtilsHashFast($params = array()) {
        return $this->request('utils/hash/fast', 'node', 'POST', $params);
    }
    public function nodePostUtilsHashSecure($params = array()) {
        return $this->request('utils/hash/secure', 'node', 'POST', $params);
    }
    public function nodePostUtilsScriptCompileCode($params = array()) {
        return $this->request('utils/script/compileCode', 'node', 'POST', $params);
    }
    public function nodePostUtilsScriptCompileWithImports($params = array()) {
        return $this->request('utils/script/compileWithImports', 'node', 'POST', $params);
    }
    public function nodePostUtilsScriptDecompile($params = array()) {
        return $this->request('utils/script/decompile', 'node', 'POST', $params);
    }
    public function nodePostUtilsScriptEstimate($params = array()) {
        return $this->request('utils/script/estimate', 'node', 'POST', $params);
    }
    public function nodePostUtilsSignPrivateKey($params = array()) {
        return $this->request('utils/sign/{privateKey}', 'node', 'POST', $params);
    }
    public function nodePostUtilsTransactionsSerialize($params = array()) {
        return $this->request('utils/transactionsSerialize', 'node', 'POST', $params);
    }
    public function nodeDeleteAddressesAddress($params = array()) {
        return $this->request('addresses/{address}', 'node', 'DELETE', $params);
    }
    public function nodeDeleteDebugRollbackToSignature($params = array()) {
        return $this->request('debug/rollback-to/{signature}', 'node', 'DELETE', $params);
    }
    public function publicGetAssets($params = array()) {
        return $this->request('assets', 'public', 'GET', $params);
    }
    public function publicGetPairs($params = array()) {
        return $this->request('pairs', 'public', 'GET', $params);
    }
    public function publicGetCandlesBaseIdQuoteId($params = array()) {
        return $this->request('candles/{baseId}/{quoteId}', 'public', 'GET', $params);
    }
    public function publicGetTransactionsExchange($params = array()) {
        return $this->request('transactions/exchange', 'public', 'GET', $params);
    }
    public function privateGetDepositAddressesCurrency($params = array()) {
        return $this->request('deposit/addresses/{currency}', 'private', 'GET', $params);
    }
    public function privateGetDepositAddressesCurrencyPlatform($params = array()) {
        return $this->request('deposit/addresses/{currency}/{platform}', 'private', 'GET', $params);
    }
    public function privateGetPlatforms($params = array()) {
        return $this->request('platforms', 'private', 'GET', $params);
    }
    public function privateGetDepositCurrencies($params = array()) {
        return $this->request('deposit/currencies', 'private', 'GET', $params);
    }
    public function privateGetWithdrawCurrencies($params = array()) {
        return $this->request('withdraw/currencies', 'private', 'GET', $params);
    }
    public function privateGetWithdrawAddressesCurrencyAddress($params = array()) {
        return $this->request('withdraw/addresses/{currency}/{address}', 'private', 'GET', $params);
    }
    public function privatePostOauth2Token($params = array()) {
        return $this->request('oauth2/token', 'private', 'POST', $params);
    }
    public function forwardGetMatcherOrdersAddress($params = array()) {
        return $this->request('matcher/orders/{address}', 'forward', 'GET', $params);
    }
    public function forwardGetMatcherOrdersAddressOrderId($params = array()) {
        return $this->request('matcher/orders/{address}/{orderId}', 'forward', 'GET', $params);
    }
    public function forwardPostMatcherOrdersWavesAddressCancel($params = array()) {
        return $this->request('matcher/orders/{wavesAddress}/cancel', 'forward', 'POST', $params);
    }
    public function marketGetTickers($params = array()) {
        return $this->request('tickers', 'market', 'GET', $params);
    }
}